
Custom Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000010b8  0000114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000490  0080011c  0080011c  00001168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d62  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb9  00000000  00000000  000030d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fce  00000000  00000000  00003f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00004f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091b  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001325  00000000  00000000  00005ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c1       	rjmp	.+634    	; 0x27c <__ctors_end>
       2:	00 00       	nop
       4:	58 c1       	rjmp	.+688    	; 0x2b6 <__bad_interrupt>
       6:	00 00       	nop
       8:	56 c1       	rjmp	.+684    	; 0x2b6 <__bad_interrupt>
       a:	00 00       	nop
       c:	54 c1       	rjmp	.+680    	; 0x2b6 <__bad_interrupt>
       e:	00 00       	nop
      10:	52 c1       	rjmp	.+676    	; 0x2b6 <__bad_interrupt>
      12:	00 00       	nop
      14:	50 c1       	rjmp	.+672    	; 0x2b6 <__bad_interrupt>
      16:	00 00       	nop
      18:	4e c1       	rjmp	.+668    	; 0x2b6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4c c1       	rjmp	.+664    	; 0x2b6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4a c1       	rjmp	.+660    	; 0x2b6 <__bad_interrupt>
      22:	00 00       	nop
      24:	48 c1       	rjmp	.+656    	; 0x2b6 <__bad_interrupt>
      26:	00 00       	nop
      28:	46 c1       	rjmp	.+652    	; 0x2b6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	44 c1       	rjmp	.+648    	; 0x2b6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	42 c1       	rjmp	.+644    	; 0x2b6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e3 c2       	rjmp	.+1478   	; 0x5fc <__vector_13>
      36:	00 00       	nop
      38:	3e c1       	rjmp	.+636    	; 0x2b6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3c c1       	rjmp	.+632    	; 0x2b6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3a c1       	rjmp	.+628    	; 0x2b6 <__bad_interrupt>
      42:	00 00       	nop
      44:	38 c1       	rjmp	.+624    	; 0x2b6 <__bad_interrupt>
      46:	00 00       	nop
      48:	36 c1       	rjmp	.+620    	; 0x2b6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	34 c1       	rjmp	.+616    	; 0x2b6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	32 c1       	rjmp	.+612    	; 0x2b6 <__bad_interrupt>
      52:	00 00       	nop
      54:	30 c1       	rjmp	.+608    	; 0x2b6 <__bad_interrupt>
      56:	00 00       	nop
      58:	2e c1       	rjmp	.+604    	; 0x2b6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2c c1       	rjmp	.+600    	; 0x2b6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	2a c1       	rjmp	.+596    	; 0x2b6 <__bad_interrupt>
      62:	00 00       	nop
      64:	28 c1       	rjmp	.+592    	; 0x2b6 <__bad_interrupt>
      66:	00 00       	nop
      68:	26 c1       	rjmp	.+588    	; 0x2b6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	24 c1       	rjmp	.+584    	; 0x2b6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	22 c1       	rjmp	.+580    	; 0x2b6 <__bad_interrupt>
      72:	00 00       	nop
      74:	20 c1       	rjmp	.+576    	; 0x2b6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1e c1       	rjmp	.+572    	; 0x2b6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1c c1       	rjmp	.+568    	; 0x2b6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1a c1       	rjmp	.+564    	; 0x2b6 <__bad_interrupt>
      82:	00 00       	nop
      84:	18 c1       	rjmp	.+560    	; 0x2b6 <__bad_interrupt>
      86:	00 00       	nop
      88:	16 c1       	rjmp	.+556    	; 0x2b6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	89 04       	cpc	r8, r9
      8e:	92 04       	cpc	r9, r2
      90:	a3 04       	cpc	r10, r3
      92:	ac 04       	cpc	r10, r12
      94:	bb 04       	cpc	r11, r11
      96:	c3 04       	cpc	r12, r3
      98:	d2 04       	cpc	r13, r2
      9a:	da 04       	cpc	r13, r10

0000009c <CHARSET>:
      9c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      ac:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      bc:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      cc:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      dc:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      ec:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      fc:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     10c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     11c:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     12c:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     13c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     14c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     15c:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     16c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     17c:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     18c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     19c:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1ac:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1bc:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1cc:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1dc:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1ec:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1fc:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     20c:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     21c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     22c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     23c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     24c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     25c:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     26c:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000027c <__ctors_end>:
     27c:	11 24       	eor	r1, r1
     27e:	1f be       	out	0x3f, r1	; 63
     280:	cf ef       	ldi	r28, 0xFF	; 255
     282:	d0 e4       	ldi	r29, 0x40	; 64
     284:	de bf       	out	0x3e, r29	; 62
     286:	cd bf       	out	0x3d, r28	; 61

00000288 <__do_copy_data>:
     288:	11 e0       	ldi	r17, 0x01	; 1
     28a:	a0 e0       	ldi	r26, 0x00	; 0
     28c:	b1 e0       	ldi	r27, 0x01	; 1
     28e:	e8 eb       	ldi	r30, 0xB8	; 184
     290:	f0 e1       	ldi	r31, 0x10	; 16
     292:	00 e0       	ldi	r16, 0x00	; 0
     294:	0b bf       	out	0x3b, r16	; 59
     296:	02 c0       	rjmp	.+4      	; 0x29c <__do_copy_data+0x14>
     298:	07 90       	elpm	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	ac 31       	cpi	r26, 0x1C	; 28
     29e:	b1 07       	cpc	r27, r17
     2a0:	d9 f7       	brne	.-10     	; 0x298 <__do_copy_data+0x10>

000002a2 <__do_clear_bss>:
     2a2:	25 e0       	ldi	r18, 0x05	; 5
     2a4:	ac e1       	ldi	r26, 0x1C	; 28
     2a6:	b1 e0       	ldi	r27, 0x01	; 1
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <.do_clear_bss_start>

000002aa <.do_clear_bss_loop>:
     2aa:	1d 92       	st	X+, r1

000002ac <.do_clear_bss_start>:
     2ac:	ac 3a       	cpi	r26, 0xAC	; 172
     2ae:	b2 07       	cpc	r27, r18
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <.do_clear_bss_loop>
     2b2:	49 d2       	rcall	.+1170   	; 0x746 <main>
     2b4:	ff c6       	rjmp	.+3582   	; 0x10b4 <_exit>

000002b6 <__bad_interrupt>:
     2b6:	a4 ce       	rjmp	.-696    	; 0x0 <__vectors>

000002b8 <time>:
     2b8:	fc 01       	movw	r30, r24
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	60 91 a8 05 	lds	r22, 0x05A8	; 0x8005a8 <__system_time>
     2c2:	70 91 a9 05 	lds	r23, 0x05A9	; 0x8005a9 <__system_time+0x1>
     2c6:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <__system_time+0x2>
     2ca:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <__system_time+0x3>
     2ce:	0f be       	out	0x3f, r0	; 63
     2d0:	30 97       	sbiw	r30, 0x00	; 0
     2d2:	21 f0       	breq	.+8      	; 0x2dc <time+0x24>
     2d4:	60 83       	st	Z, r22
     2d6:	71 83       	std	Z+1, r23	; 0x01
     2d8:	82 83       	std	Z+2, r24	; 0x02
     2da:	93 83       	std	Z+3, r25	; 0x03
     2dc:	08 95       	ret

000002de <ADC_Init>:
{
	//DDRA = 0x00;		/* Make ADC port as input */
	//ADCSRA = 0x87;		/* Enable ADC, fr/128  */
	//ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */
	
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
     2de:	ea e7       	ldi	r30, 0x7A	; 122
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	80 6c       	ori	r24, 0xC0	; 192
     2e6:	80 83       	st	Z, r24
     2e8:	08 95       	ret

000002ea <ADC_Read>:
	//ADC_value = (int)ADCL;	/* read lower byte */
	//ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */

	//return ADC;		/* return digital value */
	
	if(channel == 0x00)
     2ea:	81 11       	cpse	r24, r1
     2ec:	06 c0       	rjmp	.+12     	; 0x2fa <ADC_Read+0x10>
	{
		ADMUX &= 0xFE;
     2ee:	ec e7       	ldi	r30, 0x7C	; 124
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	80 81       	ld	r24, Z
     2f4:	8e 7f       	andi	r24, 0xFE	; 254
     2f6:	80 83       	st	Z, r24
     2f8:	07 c0       	rjmp	.+14     	; 0x308 <ADC_Read+0x1e>
	}
	else if(channel == 0x01)
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	29 f4       	brne	.+10     	; 0x308 <ADC_Read+0x1e>
	{
		ADMUX |= 0x01;
     2fe:	ec e7       	ldi	r30, 0x7C	; 124
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	81 60       	ori	r24, 0x01	; 1
     306:	80 83       	st	Z, r24
	}
	
	ADCSRA |= (1 << ADSC);
     308:	ea e7       	ldi	r30, 0x7A	; 122
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	80 81       	ld	r24, Z
     30e:	80 64       	ori	r24, 0x40	; 64
     310:	80 83       	st	Z, r24
	//while (!(ADCSRA & (1<<ADSC)));
	
	return ADC;
     312:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     316:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     31a:	08 95       	ret

0000031c <TickFct_Animate>:
	{
		
	}
	
	return g1;
}
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	91 05       	cpc	r25, r1
     320:	51 f0       	breq	.+20     	; 0x336 <TickFct_Animate+0x1a>
     322:	1c f4       	brge	.+6      	; 0x32a <TickFct_Animate+0xe>
     324:	89 2b       	or	r24, r25
     326:	a1 f0       	breq	.+40     	; 0x350 <TickFct_Animate+0x34>
     328:	56 c0       	rjmp	.+172    	; 0x3d6 <TickFct_Animate+0xba>
     32a:	82 30       	cpi	r24, 0x02	; 2
     32c:	91 05       	cpc	r25, r1
     32e:	41 f0       	breq	.+16     	; 0x340 <TickFct_Animate+0x24>
     330:	03 97       	sbiw	r24, 0x03	; 3
     332:	b1 f1       	breq	.+108    	; 0x3a0 <TickFct_Animate+0x84>
     334:	50 c0       	rjmp	.+160    	; 0x3d6 <TickFct_Animate+0xba>
     336:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
     33a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
     33e:	4e c0       	rjmp	.+156    	; 0x3dc <TickFct_Animate+0xc0>
     340:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     344:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     348:	08 97       	sbiw	r24, 0x08	; 8
     34a:	08 f4       	brcc	.+2      	; 0x34e <TickFct_Animate+0x32>
     34c:	47 c0       	rjmp	.+142    	; 0x3dc <TickFct_Animate+0xc0>
     34e:	28 c0       	rjmp	.+80     	; 0x3a0 <TickFct_Animate+0x84>
     350:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <blinkCursor>
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret
     35a:	82 17       	cp	r24, r18
     35c:	93 07       	cpc	r25, r19
     35e:	58 f0       	brcs	.+22     	; 0x376 <TickFct_Animate+0x5a>
     360:	4c 91       	ld	r20, X
     362:	40 83       	st	Z, r20
     364:	11 96       	adiw	r26, 0x01	; 1
     366:	4c 91       	ld	r20, X
     368:	11 97       	sbiw	r26, 0x01	; 1
     36a:	41 83       	std	Z+1, r20	; 0x01
     36c:	12 96       	adiw	r26, 0x02	; 2
     36e:	4c 91       	ld	r20, X
     370:	12 97       	sbiw	r26, 0x02	; 2
     372:	42 83       	std	Z+2, r20	; 0x02
     374:	03 c0       	rjmp	.+6      	; 0x37c <TickFct_Animate+0x60>
     376:	10 82       	st	Z, r1
     378:	11 82       	std	Z+1, r1	; 0x01
     37a:	12 82       	std	Z+2, r1	; 0x02
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	13 96       	adiw	r26, 0x03	; 3
     380:	33 96       	adiw	r30, 0x03	; 3
     382:	80 34       	cpi	r24, 0x40	; 64
     384:	91 05       	cpc	r25, r1
     386:	49 f7       	brne	.-46     	; 0x35a <TickFct_Animate+0x3e>
     388:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     38c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     396:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
     3a0:	e8 ee       	ldi	r30, 0xE8	; 232
     3a2:	f4 e0       	ldi	r31, 0x04	; 4
     3a4:	af e1       	ldi	r26, 0x1F	; 31
     3a6:	b4 e0       	ldi	r27, 0x04	; 4
     3a8:	28 ea       	ldi	r18, 0xA8	; 168
     3aa:	35 e0       	ldi	r19, 0x05	; 5
     3ac:	80 81       	ld	r24, Z
     3ae:	8c 93       	st	X, r24
     3b0:	81 81       	ldd	r24, Z+1	; 0x01
     3b2:	11 96       	adiw	r26, 0x01	; 1
     3b4:	8c 93       	st	X, r24
     3b6:	11 97       	sbiw	r26, 0x01	; 1
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	12 96       	adiw	r26, 0x02	; 2
     3bc:	8c 93       	st	X, r24
     3be:	12 97       	sbiw	r26, 0x02	; 2
     3c0:	33 96       	adiw	r30, 0x03	; 3
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	e2 17       	cp	r30, r18
     3c6:	f3 07       	cpc	r31, r19
     3c8:	89 f7       	brne	.-30     	; 0x3ac <TickFct_Animate+0x90>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <blinkCursor>
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	08 95       	ret
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 95       	ret
     3dc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     3e0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     3e4:	22 27       	eor	r18, r18
     3e6:	33 27       	eor	r19, r19
     3e8:	28 1b       	sub	r18, r24
     3ea:	39 0b       	sbc	r19, r25
     3ec:	22 0f       	add	r18, r18
     3ee:	33 1f       	adc	r19, r19
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	22 0f       	add	r18, r18
     3f6:	33 1f       	adc	r19, r19
     3f8:	28 5c       	subi	r18, 0xC8	; 200
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	dc 01       	movw	r26, r24
     40c:	aa 0f       	add	r26, r26
     40e:	bb 1f       	adc	r27, r27
     410:	a8 0f       	add	r26, r24
     412:	b9 1f       	adc	r27, r25
     414:	a8 5d       	subi	r26, 0xD8	; 216
     416:	bb 4f       	sbci	r27, 0xFB	; 251
     418:	ef e1       	ldi	r30, 0x1F	; 31
     41a:	f4 e0       	ldi	r31, 0x04	; 4
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	9c cf       	rjmp	.-200    	; 0x35a <TickFct_Animate+0x3e>

00000422 <TickFct_Input>:
     422:	02 97       	sbiw	r24, 0x02	; 2
     424:	78 f4       	brcc	.+30     	; 0x444 <TickFct_Input+0x22>
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	60 df       	rcall	.-320    	; 0x2ea <ADC_Read>
     42a:	90 93 e7 04 	sts	0x04E7, r25	; 0x8004e7 <ADC_X+0x1>
     42e:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <ADC_X>
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	5a df       	rcall	.-332    	; 0x2ea <ADC_Read>
     436:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <ADC_Y+0x1>
     43a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <ADC_Y>
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	08 95       	ret
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret

0000044a <TickFct_Nokia>:
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	ec 01       	movw	r28, r24
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	91 05       	cpc	r25, r1
     454:	59 f0       	breq	.+22     	; 0x46c <TickFct_Nokia+0x22>
     456:	1c f4       	brge	.+6      	; 0x45e <TickFct_Nokia+0x14>
     458:	89 2b       	or	r24, r25
     45a:	69 f1       	breq	.+90     	; 0x4b6 <TickFct_Nokia+0x6c>
     45c:	14 c0       	rjmp	.+40     	; 0x486 <TickFct_Nokia+0x3c>
     45e:	82 30       	cpi	r24, 0x02	; 2
     460:	91 05       	cpc	r25, r1
     462:	41 f0       	breq	.+16     	; 0x474 <TickFct_Nokia+0x2a>
     464:	03 97       	sbiw	r24, 0x03	; 3
     466:	09 f4       	brne	.+2      	; 0x46a <TickFct_Nokia+0x20>
     468:	58 c0       	rjmp	.+176    	; 0x51a <TickFct_Nokia+0xd0>
     46a:	0d c0       	rjmp	.+26     	; 0x486 <TickFct_Nokia+0x3c>
     46c:	8c e3       	ldi	r24, 0x3C	; 60
     46e:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <countdown>
     472:	32 c0       	rjmp	.+100    	; 0x4d8 <TickFct_Nokia+0x8e>
     474:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <countdown>
     478:	88 23       	and	r24, r24
     47a:	09 f4       	brne	.+2      	; 0x47e <TickFct_Nokia+0x34>
     47c:	4e c0       	rjmp	.+156    	; 0x51a <TickFct_Nokia+0xd0>
     47e:	81 50       	subi	r24, 0x01	; 1
     480:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <countdown>
     484:	29 c0       	rjmp	.+82     	; 0x4d8 <TickFct_Nokia+0x8e>
     486:	c1 30       	cpi	r28, 0x01	; 1
     488:	d1 05       	cpc	r29, r1
     48a:	a9 f0       	breq	.+42     	; 0x4b6 <TickFct_Nokia+0x6c>
     48c:	1c f4       	brge	.+6      	; 0x494 <TickFct_Nokia+0x4a>
     48e:	20 97       	sbiw	r28, 0x00	; 0
     490:	49 f0       	breq	.+18     	; 0x4a4 <TickFct_Nokia+0x5a>
     492:	4d c0       	rjmp	.+154    	; 0x52e <TickFct_Nokia+0xe4>
     494:	c2 30       	cpi	r28, 0x02	; 2
     496:	d1 05       	cpc	r29, r1
     498:	f9 f0       	breq	.+62     	; 0x4d8 <TickFct_Nokia+0x8e>
     49a:	c3 30       	cpi	r28, 0x03	; 3
     49c:	d1 05       	cpc	r29, r1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <TickFct_Nokia+0x58>
     4a0:	46 c0       	rjmp	.+140    	; 0x52e <TickFct_Nokia+0xe4>
     4a2:	3b c0       	rjmp	.+118    	; 0x51a <TickFct_Nokia+0xd0>
     4a4:	a2 d3       	rcall	.+1860   	; 0xbea <nokia_lcd_clear>
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	97 d4       	rcall	.+2350   	; 0xdda <nokia_lcd_set_cursor>
     4ac:	62 e0       	ldi	r22, 0x02	; 2
     4ae:	88 e0       	ldi	r24, 0x08	; 8
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	81 d4       	rcall	.+2306   	; 0xdb6 <nokia_lcd_write_string>
     4b4:	3c c0       	rjmp	.+120    	; 0x52e <TickFct_Nokia+0xe4>
     4b6:	e3 ee       	ldi	r30, 0xE3	; 227
     4b8:	f4 e0       	ldi	r31, 0x04	; 4
     4ba:	8a e5       	ldi	r24, 0x5A	; 90
     4bc:	80 83       	st	Z, r24
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	81 83       	std	Z+1, r24	; 0x01
     4c2:	93 d3       	rcall	.+1830   	; 0xbea <nokia_lcd_clear>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	88 d4       	rcall	.+2320   	; 0xdda <nokia_lcd_set_cursor>
     4ca:	62 e0       	ldi	r22, 0x02	; 2
     4cc:	8e e0       	ldi	r24, 0x0E	; 14
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	72 d4       	rcall	.+2276   	; 0xdb6 <nokia_lcd_write_string>
     4d2:	c1 e0       	ldi	r28, 0x01	; 1
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
     4d6:	2b c0       	rjmp	.+86     	; 0x52e <TickFct_Nokia+0xe4>
     4d8:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <countdown>
     4dc:	e3 ee       	ldi	r30, 0xE3	; 227
     4de:	f4 e0       	ldi	r31, 0x04	; 4
     4e0:	8d ec       	ldi	r24, 0xCD	; 205
     4e2:	98 9f       	mul	r25, r24
     4e4:	81 2d       	mov	r24, r1
     4e6:	11 24       	eor	r1, r1
     4e8:	86 95       	lsr	r24
     4ea:	86 95       	lsr	r24
     4ec:	86 95       	lsr	r24
     4ee:	20 e3       	ldi	r18, 0x30	; 48
     4f0:	28 0f       	add	r18, r24
     4f2:	20 83       	st	Z, r18
     4f4:	88 0f       	add	r24, r24
     4f6:	28 2f       	mov	r18, r24
     4f8:	22 0f       	add	r18, r18
     4fa:	22 0f       	add	r18, r18
     4fc:	82 0f       	add	r24, r18
     4fe:	98 1b       	sub	r25, r24
     500:	90 5d       	subi	r25, 0xD0	; 208
     502:	91 83       	std	Z+1, r25	; 0x01
     504:	72 d3       	rcall	.+1764   	; 0xbea <nokia_lcd_clear>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	67 d4       	rcall	.+2254   	; 0xdda <nokia_lcd_set_cursor>
     50c:	62 e0       	ldi	r22, 0x02	; 2
     50e:	83 ee       	ldi	r24, 0xE3	; 227
     510:	94 e0       	ldi	r25, 0x04	; 4
     512:	51 d4       	rcall	.+2210   	; 0xdb6 <nokia_lcd_write_string>
     514:	c2 e0       	ldi	r28, 0x02	; 2
     516:	d0 e0       	ldi	r29, 0x00	; 0
     518:	0a c0       	rjmp	.+20     	; 0x52e <TickFct_Nokia+0xe4>
     51a:	67 d3       	rcall	.+1742   	; 0xbea <nokia_lcd_clear>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	5c d4       	rcall	.+2232   	; 0xdda <nokia_lcd_set_cursor>
     522:	62 e0       	ldi	r22, 0x02	; 2
     524:	83 e1       	ldi	r24, 0x13	; 19
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	46 d4       	rcall	.+2188   	; 0xdb6 <nokia_lcd_write_string>
     52a:	c3 e0       	ldi	r28, 0x03	; 3
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	5a d4       	rcall	.+2228   	; 0xde4 <nokia_lcd_render>
     530:	ce 01       	movw	r24, r28
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <TimerOn>:
     538:	8b e0       	ldi	r24, 0x0B	; 11
     53a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     53e:	8d e7       	ldi	r24, 0x7D	; 125
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     546:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     550:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     558:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     55c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     560:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     564:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     568:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr>
     56c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x1>
     570:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <_avr_timer_cntcurr+0x2>
     574:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <_avr_timer_cntcurr+0x3>
     578:	8f b7       	in	r24, 0x3f	; 63
     57a:	80 68       	ori	r24, 0x80	; 128
     57c:	8f bf       	out	0x3f, r24	; 63
     57e:	08 95       	ret

00000580 <TimerISR>:
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ce e5       	ldi	r28, 0x5E	; 94
     58e:	d3 e0       	ldi	r29, 0x03	; 3
     590:	0f 2e       	mov	r0, r31
     592:	fa e9       	ldi	r31, 0x9A	; 154
     594:	ef 2e       	mov	r14, r31
     596:	f3 e0       	ldi	r31, 0x03	; 3
     598:	ff 2e       	mov	r15, r31
     59a:	f0 2d       	mov	r31, r0
     59c:	8e 01       	movw	r16, r28
     59e:	4e 81       	ldd	r20, Y+6	; 0x06
     5a0:	5f 81       	ldd	r21, Y+7	; 0x07
     5a2:	68 85       	ldd	r22, Y+8	; 0x08
     5a4:	79 85       	ldd	r23, Y+9	; 0x09
     5a6:	8a 81       	ldd	r24, Y+2	; 0x02
     5a8:	9b 81       	ldd	r25, Y+3	; 0x03
     5aa:	ac 81       	ldd	r26, Y+4	; 0x04
     5ac:	bd 81       	ldd	r27, Y+5	; 0x05
     5ae:	48 17       	cp	r20, r24
     5b0:	59 07       	cpc	r21, r25
     5b2:	6a 07       	cpc	r22, r26
     5b4:	7b 07       	cpc	r23, r27
     5b6:	58 f0       	brcs	.+22     	; 0x5ce <TimerISR+0x4e>
     5b8:	ea 85       	ldd	r30, Y+10	; 0x0a
     5ba:	fb 85       	ldd	r31, Y+11	; 0x0b
     5bc:	88 81       	ld	r24, Y
     5be:	99 81       	ldd	r25, Y+1	; 0x01
     5c0:	09 95       	icall
     5c2:	99 83       	std	Y+1, r25	; 0x01
     5c4:	88 83       	st	Y, r24
     5c6:	1e 82       	std	Y+6, r1	; 0x06
     5c8:	1f 82       	std	Y+7, r1	; 0x07
     5ca:	18 86       	std	Y+8, r1	; 0x08
     5cc:	19 86       	std	Y+9, r1	; 0x09
     5ce:	f8 01       	movw	r30, r16
     5d0:	86 81       	ldd	r24, Z+6	; 0x06
     5d2:	97 81       	ldd	r25, Z+7	; 0x07
     5d4:	a0 85       	ldd	r26, Z+8	; 0x08
     5d6:	b1 85       	ldd	r27, Z+9	; 0x09
     5d8:	c2 96       	adiw	r24, 0x32	; 50
     5da:	a1 1d       	adc	r26, r1
     5dc:	b1 1d       	adc	r27, r1
     5de:	86 83       	std	Z+6, r24	; 0x06
     5e0:	97 83       	std	Z+7, r25	; 0x07
     5e2:	a0 87       	std	Z+8, r26	; 0x08
     5e4:	b1 87       	std	Z+9, r27	; 0x09
     5e6:	2c 96       	adiw	r28, 0x0c	; 12
     5e8:	ce 15       	cp	r28, r14
     5ea:	df 05       	cpc	r29, r15
     5ec:	b9 f6       	brne	.-82     	; 0x59c <TimerISR+0x1c>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	08 95       	ret

000005fc <__vector_13>:
     5fc:	1f 92       	push	r1
     5fe:	0f 92       	push	r0
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	0f 92       	push	r0
     604:	11 24       	eor	r1, r1
     606:	0b b6       	in	r0, 0x3b	; 59
     608:	0f 92       	push	r0
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
     622:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <_avr_timer_cntcurr>
     626:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <_avr_timer_cntcurr+0x1>
     62a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <_avr_timer_cntcurr+0x2>
     62e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <_avr_timer_cntcurr+0x3>
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	a1 09       	sbc	r26, r1
     636:	b1 09       	sbc	r27, r1
     638:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr>
     63c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x1>
     640:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <_avr_timer_cntcurr+0x2>
     644:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <_avr_timer_cntcurr+0x3>
     648:	89 2b       	or	r24, r25
     64a:	8a 2b       	or	r24, r26
     64c:	8b 2b       	or	r24, r27
     64e:	89 f4       	brne	.+34     	; 0x672 <__vector_13+0x76>
     650:	97 df       	rcall	.-210    	; 0x580 <TimerISR>
     652:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     656:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     65a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     65e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     662:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <_avr_timer_cntcurr>
     666:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <_avr_timer_cntcurr+0x1>
     66a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <_avr_timer_cntcurr+0x2>
     66e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <_avr_timer_cntcurr+0x3>
     672:	ff 91       	pop	r31
     674:	ef 91       	pop	r30
     676:	bf 91       	pop	r27
     678:	af 91       	pop	r26
     67a:	9f 91       	pop	r25
     67c:	8f 91       	pop	r24
     67e:	7f 91       	pop	r23
     680:	6f 91       	pop	r22
     682:	5f 91       	pop	r21
     684:	4f 91       	pop	r20
     686:	3f 91       	pop	r19
     688:	2f 91       	pop	r18
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <TimerSet>:
     698:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
     69c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
     6a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
     6a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
     6a8:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <_avr_timer_cntcurr>
     6ac:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <_avr_timer_cntcurr+0x1>
     6b0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_avr_timer_cntcurr+0x2>
     6b4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <_avr_timer_cntcurr+0x3>
     6b8:	08 95       	ret

000006ba <setGemColor>:
     6ba:	61 30       	cpi	r22, 0x01	; 1
     6bc:	71 05       	cpc	r23, r1
     6be:	c9 f0       	breq	.+50     	; 0x6f2 <setGemColor+0x38>
     6c0:	1c f4       	brge	.+6      	; 0x6c8 <setGemColor+0xe>
     6c2:	67 2b       	or	r22, r23
     6c4:	41 f0       	breq	.+16     	; 0x6d6 <setGemColor+0x1c>
     6c6:	08 95       	ret
     6c8:	62 30       	cpi	r22, 0x02	; 2
     6ca:	71 05       	cpc	r23, r1
     6cc:	01 f1       	breq	.+64     	; 0x70e <setGemColor+0x54>
     6ce:	63 30       	cpi	r22, 0x03	; 3
     6d0:	71 05       	cpc	r23, r1
     6d2:	59 f1       	breq	.+86     	; 0x72a <setGemColor+0x70>
     6d4:	08 95       	ret
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	8e 0f       	add	r24, r30
     6e0:	9f 1f       	adc	r25, r31
     6e2:	fc 01       	movw	r30, r24
     6e4:	e8 51       	subi	r30, 0x18	; 24
     6e6:	fb 4f       	sbci	r31, 0xFB	; 251
     6e8:	10 82       	st	Z, r1
     6ea:	82 e0       	ldi	r24, 0x02	; 2
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	12 82       	std	Z+2, r1	; 0x02
     6f0:	08 95       	ret
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	fc 01       	movw	r30, r24
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	8e 0f       	add	r24, r30
     6fc:	9f 1f       	adc	r25, r31
     6fe:	fc 01       	movw	r30, r24
     700:	e8 51       	subi	r30, 0x18	; 24
     702:	fb 4f       	sbci	r31, 0xFB	; 251
     704:	10 82       	st	Z, r1
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	82 83       	std	Z+2, r24	; 0x02
     70c:	08 95       	ret
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	8e 0f       	add	r24, r30
     718:	9f 1f       	adc	r25, r31
     71a:	fc 01       	movw	r30, r24
     71c:	e8 51       	subi	r30, 0x18	; 24
     71e:	fb 4f       	sbci	r31, 0xFB	; 251
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	80 83       	st	Z, r24
     724:	11 82       	std	Z+1, r1	; 0x01
     726:	12 82       	std	Z+2, r1	; 0x02
     728:	08 95       	ret
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	fc 01       	movw	r30, r24
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	8e 0f       	add	r24, r30
     734:	9f 1f       	adc	r25, r31
     736:	fc 01       	movw	r30, r24
     738:	e8 51       	subi	r30, 0x18	; 24
     73a:	fb 4f       	sbci	r31, 0xFB	; 251
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
     740:	81 83       	std	Z+1, r24	; 0x01
     742:	12 82       	std	Z+2, r1	; 0x02
     744:	08 95       	ret

00000746 <main>:
     746:	11 b8       	out	0x01, r1	; 1
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	82 b9       	out	0x02, r24	; 2
     74c:	84 b9       	out	0x04, r24	; 4
     74e:	15 b8       	out	0x05, r1	; 5
     750:	87 b9       	out	0x07, r24	; 7
     752:	18 b8       	out	0x08, r1	; 8
     754:	ee e5       	ldi	r30, 0x5E	; 94
     756:	f3 e0       	ldi	r31, 0x03	; 3
     758:	11 82       	std	Z+1, r1	; 0x01
     75a:	10 82       	st	Z, r1
     75c:	82 e3       	ldi	r24, 0x32	; 50
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a0 e0       	ldi	r26, 0x00	; 0
     762:	b0 e0       	ldi	r27, 0x00	; 0
     764:	82 83       	std	Z+2, r24	; 0x02
     766:	93 83       	std	Z+3, r25	; 0x03
     768:	a4 83       	std	Z+4, r26	; 0x04
     76a:	b5 83       	std	Z+5, r27	; 0x05
     76c:	16 82       	std	Z+6, r1	; 0x06
     76e:	17 82       	std	Z+7, r1	; 0x07
     770:	10 86       	std	Z+8, r1	; 0x08
     772:	11 86       	std	Z+9, r1	; 0x09
     774:	81 e1       	ldi	r24, 0x11	; 17
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	93 87       	std	Z+11, r25	; 0x0b
     77a:	82 87       	std	Z+10, r24	; 0x0a
     77c:	15 86       	std	Z+13, r1	; 0x0d
     77e:	14 86       	std	Z+12, r1	; 0x0c
     780:	88 ec       	ldi	r24, 0xC8	; 200
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a0 e0       	ldi	r26, 0x00	; 0
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	86 87       	std	Z+14, r24	; 0x0e
     78a:	97 87       	std	Z+15, r25	; 0x0f
     78c:	a0 8b       	std	Z+16, r26	; 0x10
     78e:	b1 8b       	std	Z+17, r27	; 0x11
     790:	12 8a       	std	Z+18, r1	; 0x12
     792:	13 8a       	std	Z+19, r1	; 0x13
     794:	14 8a       	std	Z+20, r1	; 0x14
     796:	15 8a       	std	Z+21, r1	; 0x15
     798:	29 ee       	ldi	r18, 0xE9	; 233
     79a:	34 e0       	ldi	r19, 0x04	; 4
     79c:	37 8b       	std	Z+23, r19	; 0x17
     79e:	26 8b       	std	Z+22, r18	; 0x16
     7a0:	11 8e       	std	Z+25, r1	; 0x19
     7a2:	10 8e       	std	Z+24, r1	; 0x18
     7a4:	48 e9       	ldi	r20, 0x98	; 152
     7a6:	5a e3       	ldi	r21, 0x3A	; 58
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	42 8f       	std	Z+26, r20	; 0x1a
     7ae:	53 8f       	std	Z+27, r21	; 0x1b
     7b0:	64 8f       	std	Z+28, r22	; 0x1c
     7b2:	75 8f       	std	Z+29, r23	; 0x1d
     7b4:	16 8e       	std	Z+30, r1	; 0x1e
     7b6:	17 8e       	std	Z+31, r1	; 0x1f
     7b8:	10 a2       	std	Z+32, r1	; 0x20
     7ba:	11 a2       	std	Z+33, r1	; 0x21
     7bc:	25 e2       	ldi	r18, 0x25	; 37
     7be:	32 e0       	ldi	r19, 0x02	; 2
     7c0:	33 a3       	std	Z+35, r19	; 0x23
     7c2:	22 a3       	std	Z+34, r18	; 0x22
     7c4:	15 a2       	std	Z+37, r1	; 0x25
     7c6:	14 a2       	std	Z+36, r1	; 0x24
     7c8:	44 ec       	ldi	r20, 0xC4	; 196
     7ca:	59 e0       	ldi	r21, 0x09	; 9
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	46 a3       	std	Z+38, r20	; 0x26
     7d2:	57 a3       	std	Z+39, r21	; 0x27
     7d4:	60 a7       	std	Z+40, r22	; 0x28
     7d6:	71 a7       	std	Z+41, r23	; 0x29
     7d8:	12 a6       	std	Z+42, r1	; 0x2a
     7da:	13 a6       	std	Z+43, r1	; 0x2b
     7dc:	14 a6       	std	Z+44, r1	; 0x2c
     7de:	15 a6       	std	Z+45, r1	; 0x2d
     7e0:	2e e8       	ldi	r18, 0x8E	; 142
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	37 a7       	std	Z+47, r19	; 0x2f
     7e6:	26 a7       	std	Z+46, r18	; 0x2e
     7e8:	11 aa       	std	Z+49, r1	; 0x31
     7ea:	10 aa       	std	Z+48, r1	; 0x30
     7ec:	82 ab       	std	Z+50, r24	; 0x32
     7ee:	93 ab       	std	Z+51, r25	; 0x33
     7f0:	a4 ab       	std	Z+52, r26	; 0x34
     7f2:	b5 ab       	std	Z+53, r27	; 0x35
     7f4:	16 aa       	std	Z+54, r1	; 0x36
     7f6:	17 aa       	std	Z+55, r1	; 0x37
     7f8:	10 ae       	std	Z+56, r1	; 0x38
     7fa:	11 ae       	std	Z+57, r1	; 0x39
     7fc:	8a e5       	ldi	r24, 0x5A	; 90
     7fe:	95 e0       	ldi	r25, 0x05	; 5
     800:	93 af       	std	Z+59, r25	; 0x3b
     802:	82 af       	std	Z+58, r24	; 0x3a
     804:	6c dd       	rcall	.-1320   	; 0x2de <ADC_Init>
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	44 df       	rcall	.-376    	; 0x698 <TimerSet>
     810:	93 de       	rcall	.-730    	; 0x538 <TimerOn>
     812:	b5 d1       	rcall	.+874    	; 0xb7e <nokia_lcd_init>
     814:	fe d2       	rcall	.+1532   	; 0xe12 <initMatrix>
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	62 e0       	ldi	r22, 0x02	; 2
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	1b d3       	rcall	.+1590   	; 0xe54 <setAllLEDs>
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	4a dd       	rcall	.-1388   	; 0x2b8 <time>
     824:	df d3       	rcall	.+1982   	; 0xfe4 <srand>
     826:	ff cf       	rjmp	.-2      	; 0x826 <main+0xe0>

00000828 <stickMoved>:
     828:	9a 95       	dec	r25
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	92 40       	sbci	r25, 0x02	; 2
     82e:	38 f4       	brcc	.+14     	; 0x83e <stickMoved+0x16>
     830:	7a 95       	dec	r23
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	61 30       	cpi	r22, 0x01	; 1
     836:	72 40       	sbci	r23, 0x02	; 2
     838:	18 f4       	brcc	.+6      	; 0x840 <stickMoved+0x18>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	08 95       	ret
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	08 95       	ret

00000842 <getDirection>:
     842:	61 30       	cpi	r22, 0x01	; 1
     844:	23 e0       	ldi	r18, 0x03	; 3
     846:	72 07       	cpc	r23, r18
     848:	78 f0       	brcs	.+30     	; 0x868 <getDirection+0x26>
     84a:	81 30       	cpi	r24, 0x01	; 1
     84c:	43 e0       	ldi	r20, 0x03	; 3
     84e:	94 07       	cpc	r25, r20
     850:	c0 f5       	brcc	.+112    	; 0x8c2 <getDirection+0x80>
     852:	9c 01       	movw	r18, r24
     854:	21 50       	subi	r18, 0x01	; 1
     856:	31 40       	sbci	r19, 0x01	; 1
     858:	2f 3f       	cpi	r18, 0xFF	; 255
     85a:	31 40       	sbci	r19, 0x01	; 1
     85c:	a8 f1       	brcs	.+106    	; 0x8c8 <getDirection+0x86>
     85e:	8f 3f       	cpi	r24, 0xFF	; 255
     860:	91 05       	cpc	r25, r1
     862:	09 f0       	breq	.+2      	; 0x866 <getDirection+0x24>
     864:	e8 f4       	brcc	.+58     	; 0x8a0 <getDirection+0x5e>
     866:	33 c0       	rjmp	.+102    	; 0x8ce <getDirection+0x8c>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	23 e0       	ldi	r18, 0x03	; 3
     86c:	92 07       	cpc	r25, r18
     86e:	08 f4       	brcc	.+2      	; 0x872 <getDirection+0x30>
     870:	43 c0       	rjmp	.+134    	; 0x8f8 <getDirection+0xb6>
     872:	61 15       	cp	r22, r1
     874:	43 e0       	ldi	r20, 0x03	; 3
     876:	74 07       	cpc	r23, r20
     878:	60 f4       	brcc	.+24     	; 0x892 <getDirection+0x50>
     87a:	61 30       	cpi	r22, 0x01	; 1
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	78 07       	cpc	r23, r24
     880:	48 f5       	brcc	.+82     	; 0x8d4 <getDirection+0x92>
     882:	07 c0       	rjmp	.+14     	; 0x892 <getDirection+0x50>
     884:	9b 01       	movw	r18, r22
     886:	21 50       	subi	r18, 0x01	; 1
     888:	31 40       	sbci	r19, 0x01	; 1
     88a:	2f 3f       	cpi	r18, 0xFF	; 255
     88c:	31 40       	sbci	r19, 0x01	; 1
     88e:	28 f1       	brcs	.+74     	; 0x8da <getDirection+0x98>
     890:	07 c0       	rjmp	.+14     	; 0x8a0 <getDirection+0x5e>
     892:	6f 3f       	cpi	r22, 0xFF	; 255
     894:	71 05       	cpc	r23, r1
     896:	21 f1       	breq	.+72     	; 0x8e0 <getDirection+0x9e>
     898:	18 f1       	brcs	.+70     	; 0x8e0 <getDirection+0x9e>
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	08 95       	ret
     8a0:	6f 3f       	cpi	r22, 0xFF	; 255
     8a2:	71 05       	cpc	r23, r1
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <getDirection+0x66>
     8a6:	f8 f4       	brcc	.+62     	; 0x8e6 <getDirection+0xa4>
     8a8:	9c 01       	movw	r18, r24
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	31 40       	sbci	r19, 0x01	; 1
     8ae:	2f 3f       	cpi	r18, 0xFF	; 255
     8b0:	31 40       	sbci	r19, 0x01	; 1
     8b2:	e0 f0       	brcs	.+56     	; 0x8ec <getDirection+0xaa>
     8b4:	8f 3f       	cpi	r24, 0xFF	; 255
     8b6:	91 05       	cpc	r25, r1
     8b8:	e1 f0       	breq	.+56     	; 0x8f2 <getDirection+0xb0>
     8ba:	d8 f0       	brcs	.+54     	; 0x8f2 <getDirection+0xb0>
     8bc:	88 e0       	ldi	r24, 0x08	; 8
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	08 95       	ret
     8c2:	87 e0       	ldi	r24, 0x07	; 7
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	08 95       	ret
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	08 95       	ret
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	08 95       	ret
     8d4:	86 e0       	ldi	r24, 0x06	; 6
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	08 95       	ret
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret
     8e0:	85 e0       	ldi	r24, 0x05	; 5
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	08 95       	ret
     8e6:	88 e0       	ldi	r24, 0x08	; 8
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	08 95       	ret
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 95       	ret
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	08 95       	ret
     8f8:	8f 3f       	cpi	r24, 0xFF	; 255
     8fa:	91 05       	cpc	r25, r1
     8fc:	19 f2       	breq	.-122    	; 0x884 <getDirection+0x42>
     8fe:	10 f2       	brcs	.-124    	; 0x884 <getDirection+0x42>
     900:	cf cf       	rjmp	.-98     	; 0x8a0 <getDirection+0x5e>

00000902 <moveCursor>:
     902:	88 30       	cpi	r24, 0x08	; 8
     904:	91 05       	cpc	r25, r1
     906:	08 f0       	brcs	.+2      	; 0x90a <moveCursor+0x8>
     908:	63 c0       	rjmp	.+198    	; 0x9d0 <moveCursor+0xce>
     90a:	fc 01       	movw	r30, r24
     90c:	ea 5b       	subi	r30, 0xBA	; 186
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	16 c3       	rjmp	.+1580   	; 0xf3e <__tablejump2__>
     912:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <cursor+0x1>
     916:	88 23       	and	r24, r24
     918:	09 f4       	brne	.+2      	; 0x91c <moveCursor+0x1a>
     91a:	5a c0       	rjmp	.+180    	; 0x9d0 <moveCursor+0xce>
     91c:	81 50       	subi	r24, 0x01	; 1
     91e:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <cursor+0x1>
     922:	08 95       	ret
     924:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <cursor+0x1>
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <moveCursor+0x2c>
     92c:	51 c0       	rjmp	.+162    	; 0x9d0 <moveCursor+0xce>
     92e:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <cursor>
     932:	97 30       	cpi	r25, 0x07	; 7
     934:	08 f0       	brcs	.+2      	; 0x938 <moveCursor+0x36>
     936:	4c c0       	rjmp	.+152    	; 0x9d0 <moveCursor+0xce>
     938:	ef ed       	ldi	r30, 0xDF	; 223
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	9f 5f       	subi	r25, 0xFF	; 255
     93e:	90 83       	st	Z, r25
     940:	81 50       	subi	r24, 0x01	; 1
     942:	81 83       	std	Z+1, r24	; 0x01
     944:	08 95       	ret
     946:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <cursor>
     94a:	87 30       	cpi	r24, 0x07	; 7
     94c:	08 f0       	brcs	.+2      	; 0x950 <moveCursor+0x4e>
     94e:	40 c0       	rjmp	.+128    	; 0x9d0 <moveCursor+0xce>
     950:	8f 5f       	subi	r24, 0xFF	; 255
     952:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <cursor>
     956:	08 95       	ret
     958:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <cursor>
     95c:	87 30       	cpi	r24, 0x07	; 7
     95e:	c0 f5       	brcc	.+112    	; 0x9d0 <moveCursor+0xce>
     960:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <cursor+0x1>
     964:	97 30       	cpi	r25, 0x07	; 7
     966:	a0 f5       	brcc	.+104    	; 0x9d0 <moveCursor+0xce>
     968:	ef ed       	ldi	r30, 0xDF	; 223
     96a:	f4 e0       	ldi	r31, 0x04	; 4
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	80 83       	st	Z, r24
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	91 83       	std	Z+1, r25	; 0x01
     974:	08 95       	ret
     976:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <cursor+0x1>
     97a:	87 30       	cpi	r24, 0x07	; 7
     97c:	48 f5       	brcc	.+82     	; 0x9d0 <moveCursor+0xce>
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <cursor+0x1>
     984:	08 95       	ret
     986:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <cursor+0x1>
     98a:	87 30       	cpi	r24, 0x07	; 7
     98c:	08 f5       	brcc	.+66     	; 0x9d0 <moveCursor+0xce>
     98e:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <cursor>
     992:	99 23       	and	r25, r25
     994:	e9 f0       	breq	.+58     	; 0x9d0 <moveCursor+0xce>
     996:	ef ed       	ldi	r30, 0xDF	; 223
     998:	f4 e0       	ldi	r31, 0x04	; 4
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	81 83       	std	Z+1, r24	; 0x01
     99e:	91 50       	subi	r25, 0x01	; 1
     9a0:	90 83       	st	Z, r25
     9a2:	08 95       	ret
     9a4:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <cursor>
     9a8:	88 23       	and	r24, r24
     9aa:	91 f0       	breq	.+36     	; 0x9d0 <moveCursor+0xce>
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <cursor>
     9b2:	08 95       	ret
     9b4:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <cursor>
     9b8:	88 23       	and	r24, r24
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <moveCursor+0xce>
     9bc:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <cursor+0x1>
     9c0:	99 23       	and	r25, r25
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <moveCursor+0xce>
     9c4:	ef ed       	ldi	r30, 0xDF	; 223
     9c6:	f4 e0       	ldi	r31, 0x04	; 4
     9c8:	81 50       	subi	r24, 0x01	; 1
     9ca:	80 83       	st	Z, r24
     9cc:	91 50       	subi	r25, 0x01	; 1
     9ce:	91 83       	std	Z+1, r25	; 0x01
     9d0:	08 95       	ret

000009d2 <TickFct_Controller>:
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	ec 01       	movw	r28, r24
     9e0:	82 30       	cpi	r24, 0x02	; 2
     9e2:	91 05       	cpc	r25, r1
     9e4:	79 f0       	breq	.+30     	; 0xa04 <TickFct_Controller+0x32>
     9e6:	2c f4       	brge	.+10     	; 0x9f2 <TickFct_Controller+0x20>
     9e8:	00 97       	sbiw	r24, 0x00	; 0
     9ea:	79 f1       	breq	.+94     	; 0xa4a <TickFct_Controller+0x78>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	a1 f1       	breq	.+104    	; 0xa58 <TickFct_Controller+0x86>
     9f0:	36 c0       	rjmp	.+108    	; 0xa5e <TickFct_Controller+0x8c>
     9f2:	83 30       	cpi	r24, 0x03	; 3
     9f4:	91 05       	cpc	r25, r1
     9f6:	19 f0       	breq	.+6      	; 0x9fe <TickFct_Controller+0x2c>
     9f8:	04 97       	sbiw	r24, 0x04	; 4
     9fa:	d9 f0       	breq	.+54     	; 0xa32 <TickFct_Controller+0x60>
     9fc:	30 c0       	rjmp	.+96     	; 0xa5e <TickFct_Controller+0x8c>
     9fe:	c4 e0       	ldi	r28, 0x04	; 4
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	32 c0       	rjmp	.+100    	; 0xa68 <TickFct_Controller+0x96>
     a04:	e0 90 1c 03 	lds	r14, 0x031C	; 0x80031c <ADC_Y>
     a08:	f0 90 1d 03 	lds	r15, 0x031D	; 0x80031d <ADC_Y+0x1>
     a0c:	00 91 e6 04 	lds	r16, 0x04E6	; 0x8004e6 <ADC_X>
     a10:	10 91 e7 04 	lds	r17, 0x04E7	; 0x8004e7 <ADC_X+0x1>
     a14:	b7 01       	movw	r22, r14
     a16:	c8 01       	movw	r24, r16
     a18:	07 df       	rcall	.-498    	; 0x828 <stickMoved>
     a1a:	88 23       	and	r24, r24
     a1c:	29 f1       	breq	.+74     	; 0xa68 <TickFct_Controller+0x96>
     a1e:	b7 01       	movw	r22, r14
     a20:	c8 01       	movw	r24, r16
     a22:	0f df       	rcall	.-482    	; 0x842 <getDirection>
     a24:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <moveDir>
     a28:	99 27       	eor	r25, r25
     a2a:	6b df       	rcall	.-298    	; 0x902 <moveCursor>
     a2c:	c3 e0       	ldi	r28, 0x03	; 3
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	1b c0       	rjmp	.+54     	; 0xa68 <TickFct_Controller+0x96>
     a32:	60 91 1c 03 	lds	r22, 0x031C	; 0x80031c <ADC_Y>
     a36:	70 91 1d 03 	lds	r23, 0x031D	; 0x80031d <ADC_Y+0x1>
     a3a:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <ADC_X>
     a3e:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <ADC_X+0x1>
     a42:	f2 de       	rcall	.-540    	; 0x828 <stickMoved>
     a44:	88 23       	and	r24, r24
     a46:	71 f0       	breq	.+28     	; 0xa64 <TickFct_Controller+0x92>
     a48:	0f c0       	rjmp	.+30     	; 0xa68 <TickFct_Controller+0x96>
     a4a:	ef ed       	ldi	r30, 0xDF	; 223
     a4c:	f4 e0       	ldi	r31, 0x04	; 4
     a4e:	10 82       	st	Z, r1
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	c1 e0       	ldi	r28, 0x01	; 1
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	08 c0       	rjmp	.+16     	; 0xa68 <TickFct_Controller+0x96>
     a58:	c2 e0       	ldi	r28, 0x02	; 2
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <TickFct_Controller+0x96>
     a5e:	c0 e0       	ldi	r28, 0x00	; 0
     a60:	d0 e0       	ldi	r29, 0x00	; 0
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <TickFct_Controller+0x96>
     a64:	c2 e0       	ldi	r28, 0x02	; 2
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	ce 01       	movw	r24, r28
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	08 95       	ret

00000a78 <initLEDs>:
     a78:	cf 93       	push	r28
     a7a:	c0 e0       	ldi	r28, 0x00	; 0
     a7c:	b0 d2       	rcall	.+1376   	; 0xfde <rand>
     a7e:	bc 01       	movw	r22, r24
     a80:	63 70       	andi	r22, 0x03	; 3
     a82:	70 78       	andi	r23, 0x80	; 128
     a84:	77 23       	and	r23, r23
     a86:	34 f4       	brge	.+12     	; 0xa94 <initLEDs+0x1c>
     a88:	61 50       	subi	r22, 0x01	; 1
     a8a:	71 09       	sbc	r23, r1
     a8c:	6c 6f       	ori	r22, 0xFC	; 252
     a8e:	7f 6f       	ori	r23, 0xFF	; 255
     a90:	6f 5f       	subi	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	8c 2f       	mov	r24, r28
     a96:	11 de       	rcall	.-990    	; 0x6ba <setGemColor>
     a98:	cf 5f       	subi	r28, 0xFF	; 255
     a9a:	c0 34       	cpi	r28, 0x40	; 64
     a9c:	79 f7       	brne	.-34     	; 0xa7c <initLEDs+0x4>
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <getCursorIndex>:

// Specifically for LED function, converts 2 indices to 1
unsigned char getCursorIndex()
{
	return cursor.xIndex + (cursor.yIndex * 8);
     aa2:	ef ed       	ldi	r30, 0xDF	; 223
     aa4:	f4 e0       	ldi	r31, 0x04	; 4
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	88 0f       	add	r24, r24
     aaa:	88 0f       	add	r24, r24
     aac:	88 0f       	add	r24, r24
     aae:	90 81       	ld	r25, Z
}
     ab0:	89 0f       	add	r24, r25
     ab2:	08 95       	ret

00000ab4 <TickFct_LED>:
// LEDs

void initLEDs();

int TickFct_LED(int state)
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
	switch(state)
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	71 f0       	breq	.+28     	; 0xada <TickFct_LED+0x26>
     abe:	1c f0       	brlt	.+6      	; 0xac6 <TickFct_LED+0x12>
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	91 05       	cpc	r25, r1
     ac4:	34 f0       	brlt	.+12     	; 0xad2 <TickFct_LED+0x1e>
			break;
			
		default:
			break;
	}
	switch(state)
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	91 05       	cpc	r25, r1
     aca:	39 f0       	breq	.+14     	; 0xada <TickFct_LED+0x26>
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	91 05       	cpc	r25, r1
     ad0:	89 f5       	brne	.+98     	; 0xb34 <TickFct_LED+0x80>
     ad2:	0f e1       	ldi	r16, 0x1F	; 31
     ad4:	14 e0       	ldi	r17, 0x04	; 4
// LEDs

void initLEDs();

int TickFct_LED(int state)
{
     ad6:	c0 e0       	ldi	r28, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <TickFct_LED+0x2e>
	{
		case LED_Start:
			break;
			
		case LED_Init:
			initLEDs();
     ada:	ce df       	rcall	.-100    	; 0xa78 <initLEDs>
			break;
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
			
		case LED_Cycle:
			for(unsigned char i = 0; i < 64; i++)
			{
				if(i != getCursorIndex())
     ae0:	29 c0       	rjmp	.+82     	; 0xb34 <TickFct_LED+0x80>
     ae2:	df df       	rcall	.-66     	; 0xaa2 <getCursorIndex>
     ae4:	8c 17       	cp	r24, r28
     ae6:	31 f0       	breq	.+12     	; 0xaf4 <TickFct_LED+0x40>
				{
					setLED(i, LEDs[i].green, LEDs[i].blue, LEDs[i].red);	
     ae8:	f8 01       	movw	r30, r16
     aea:	21 81       	ldd	r18, Z+1	; 0x01
     aec:	42 81       	ldd	r20, Z+2	; 0x02
     aee:	60 81       	ld	r22, Z
     af0:	8c 2f       	mov	r24, r28
     af2:	a2 d1       	rcall	.+836    	; 0xe38 <setLED>
		case LED_Init:
			initLEDs();
			break;
			
		case LED_Cycle:
			for(unsigned char i = 0; i < 64; i++)
     af4:	cf 5f       	subi	r28, 0xFF	; 255
     af6:	0d 5f       	subi	r16, 0xFD	; 253
     af8:	1f 4f       	sbci	r17, 0xFF	; 255
     afa:	c0 34       	cpi	r28, 0x40	; 64
     afc:	91 f7       	brne	.-28     	; 0xae2 <TickFct_LED+0x2e>
				if(i != getCursorIndex())
				{
					setLED(i, LEDs[i].green, LEDs[i].blue, LEDs[i].red);	
				}
			}
			if(blinkCursor)
     afe:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <blinkCursor>
     b02:	88 23       	and	r24, r24
			{
				setLED(getCursorIndex(), 5, 5, 5);
     b04:	31 f0       	breq	.+12     	; 0xb12 <TickFct_LED+0x5e>
     b06:	cd df       	rcall	.-102    	; 0xaa2 <getCursorIndex>
     b08:	25 e0       	ldi	r18, 0x05	; 5
     b0a:	45 e0       	ldi	r20, 0x05	; 5
     b0c:	65 e0       	ldi	r22, 0x05	; 5
     b0e:	94 d1       	rcall	.+808    	; 0xe38 <setLED>
			}
			else
			{
				setLED(getCursorIndex(), LEDs[getCursorIndex()].green, LEDs[getCursorIndex()].blue, LEDs[getCursorIndex()].red);
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <TickFct_LED+0x7a>
     b12:	c7 df       	rcall	.-114    	; 0xaa2 <getCursorIndex>
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	f9 01       	movw	r30, r18
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	e2 0f       	add	r30, r18
     b20:	f3 1f       	adc	r31, r19
     b22:	e1 5e       	subi	r30, 0xE1	; 225
     b24:	fb 4f       	sbci	r31, 0xFB	; 251
     b26:	21 81       	ldd	r18, Z+1	; 0x01
     b28:	42 81       	ldd	r20, Z+2	; 0x02
     b2a:	60 81       	ld	r22, Z
			}
			cycle();
     b2c:	85 d1       	rcall	.+778    	; 0xe38 <setLED>
     b2e:	cc d1       	rcall	.+920    	; 0xec8 <cycle>
			break;
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	90 e0       	ldi	r25, 0x00	; 0
	}
	return state;
}
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     b3c:	40 98       	cbi	0x08, 0	; 8
     b3e:	66 23       	and	r22, r22
     b40:	11 f0       	breq	.+4      	; 0xb46 <write+0xa>
     b42:	42 9a       	sbi	0x08, 2	; 8
     b44:	15 c0       	rjmp	.+42     	; 0xb70 <write+0x34>
     b46:	42 98       	cbi	0x08, 2	; 8
     b48:	13 c0       	rjmp	.+38     	; 0xb70 <write+0x34>
     b4a:	ac 01       	movw	r20, r24
     b4c:	02 2e       	mov	r0, r18
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <write+0x18>
     b50:	55 95       	asr	r21
     b52:	47 95       	ror	r20
     b54:	0a 94       	dec	r0
     b56:	e2 f7       	brpl	.-8      	; 0xb50 <write+0x14>
     b58:	40 ff       	sbrs	r20, 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <write+0x24>
     b5c:	43 9a       	sbi	0x08, 3	; 8
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <write+0x26>
     b60:	43 98       	cbi	0x08, 3	; 8
     b62:	44 9a       	sbi	0x08, 4	; 8
     b64:	44 98       	cbi	0x08, 4	; 8
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	31 09       	sbc	r19, r1
     b6a:	78 f7       	brcc	.-34     	; 0xb4a <write+0xe>
     b6c:	40 9a       	sbi	0x08, 0	; 8
     b6e:	08 95       	ret
     b70:	27 e0       	ldi	r18, 0x07	; 7
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	e9 cf       	rjmp	.-46     	; 0xb4a <write+0xe>

00000b78 <write_cmd>:
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	e0 cf       	rjmp	.-64     	; 0xb3c <write>
     b7c:	08 95       	ret

00000b7e <nokia_lcd_init>:
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	38 9a       	sbi	0x07, 0	; 7
     b84:	39 9a       	sbi	0x07, 1	; 7
     b86:	3a 9a       	sbi	0x07, 2	; 7
     b88:	3b 9a       	sbi	0x07, 3	; 7
     b8a:	3c 9a       	sbi	0x07, 4	; 7
     b8c:	41 9a       	sbi	0x08, 1	; 8
     b8e:	40 9a       	sbi	0x08, 0	; 8
     b90:	83 ec       	ldi	r24, 0xC3	; 195
     b92:	99 e0       	ldi	r25, 0x09	; 9
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <nokia_lcd_init+0x16>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <nokia_lcd_init+0x1c>
     b9a:	00 00       	nop
     b9c:	41 98       	cbi	0x08, 1	; 8
     b9e:	8b e5       	ldi	r24, 0x5B	; 91
     ba0:	94 e4       	ldi	r25, 0x44	; 68
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <nokia_lcd_init+0x24>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <nokia_lcd_init+0x2a>
     ba8:	00 00       	nop
     baa:	41 9a       	sbi	0x08, 1	; 8
     bac:	40 98       	cbi	0x08, 0	; 8
     bae:	81 e2       	ldi	r24, 0x21	; 33
     bb0:	e3 df       	rcall	.-58     	; 0xb78 <write_cmd>
     bb2:	83 e1       	ldi	r24, 0x13	; 19
     bb4:	e1 df       	rcall	.-62     	; 0xb78 <write_cmd>
     bb6:	86 e0       	ldi	r24, 0x06	; 6
     bb8:	df df       	rcall	.-66     	; 0xb78 <write_cmd>
     bba:	82 ec       	ldi	r24, 0xC2	; 194
     bbc:	dd df       	rcall	.-70     	; 0xb78 <write_cmd>
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	db df       	rcall	.-74     	; 0xb78 <write_cmd>
     bc2:	89 e0       	ldi	r24, 0x09	; 9
     bc4:	d9 df       	rcall	.-78     	; 0xb78 <write_cmd>
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	d7 df       	rcall	.-82     	; 0xb78 <write_cmd>
     bca:	88 e4       	ldi	r24, 0x48	; 72
     bcc:	d5 df       	rcall	.-86     	; 0xb78 <write_cmd>
     bce:	c8 ef       	ldi	r28, 0xF8	; 248
     bd0:	d1 e0       	ldi	r29, 0x01	; 1
     bd2:	61 e0       	ldi	r22, 0x01	; 1
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	b2 df       	rcall	.-156    	; 0xb3c <write>
     bd8:	21 97       	sbiw	r28, 0x01	; 1
     bda:	d9 f7       	brne	.-10     	; 0xbd2 <nokia_lcd_init+0x54>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	cc df       	rcall	.-104    	; 0xb78 <write_cmd>
     be0:	8c e0       	ldi	r24, 0x0C	; 12
     be2:	ca df       	rcall	.-108    	; 0xb78 <write_cmd>
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <nokia_lcd_clear>:
     bea:	80 e8       	ldi	r24, 0x80	; 128
     bec:	c5 df       	rcall	.-118    	; 0xb78 <write_cmd>
     bee:	80 e4       	ldi	r24, 0x40	; 64
     bf0:	c3 df       	rcall	.-122    	; 0xb78 <write_cmd>
     bf2:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <nokia_lcd+0x1f8>
     bf6:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <nokia_lcd+0x1f9>
     bfa:	e2 e2       	ldi	r30, 0x22	; 34
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	8a e1       	ldi	r24, 0x1A	; 26
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	11 92       	st	Z+, r1
     c04:	e8 17       	cp	r30, r24
     c06:	f9 07       	cpc	r31, r25
     c08:	e1 f7       	brne	.-8      	; 0xc02 <nokia_lcd_clear+0x18>
     c0a:	08 95       	ret

00000c0c <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     c0c:	26 2f       	mov	r18, r22
     c0e:	26 95       	lsr	r18
     c10:	26 95       	lsr	r18
     c12:	26 95       	lsr	r18
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	34 e5       	ldi	r19, 0x54	; 84
     c18:	23 9f       	mul	r18, r19
     c1a:	80 0d       	add	r24, r0
     c1c:	91 1d       	adc	r25, r1
     c1e:	11 24       	eor	r1, r1
	if (value)
     c20:	44 23       	and	r20, r20
     c22:	79 f0       	breq	.+30     	; 0xc42 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     c24:	fc 01       	movw	r30, r24
     c26:	ee 5d       	subi	r30, 0xDE	; 222
     c28:	fe 4f       	sbci	r31, 0xFE	; 254
     c2a:	67 70       	andi	r22, 0x07	; 7
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <nokia_lcd_set_pixel+0x2a>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	6a 95       	dec	r22
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <nokia_lcd_set_pixel+0x26>
     c3a:	90 81       	ld	r25, Z
     c3c:	89 2b       	or	r24, r25
     c3e:	80 83       	st	Z, r24
     c40:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     c42:	fc 01       	movw	r30, r24
     c44:	ee 5d       	subi	r30, 0xDE	; 222
     c46:	fe 4f       	sbci	r31, 0xFE	; 254
     c48:	67 70       	andi	r22, 0x07	; 7
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <nokia_lcd_set_pixel+0x48>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	6a 95       	dec	r22
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <nokia_lcd_set_pixel+0x44>
     c58:	80 95       	com	r24
     c5a:	90 81       	ld	r25, Z
     c5c:	89 23       	and	r24, r25
     c5e:	80 83       	st	Z, r24
     c60:	08 95       	ret

00000c62 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     c62:	5f 92       	push	r5
     c64:	6f 92       	push	r6
     c66:	7f 92       	push	r7
     c68:	8f 92       	push	r8
     c6a:	9f 92       	push	r9
     c6c:	af 92       	push	r10
     c6e:	bf 92       	push	r11
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     c82:	26 2f       	mov	r18, r22
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	49 01       	movw	r8, r18
     c88:	88 0c       	add	r8, r8
     c8a:	99 1c       	adc	r9, r9
     c8c:	88 0c       	add	r8, r8
     c8e:	99 1c       	adc	r9, r9
     c90:	82 0e       	add	r8, r18
     c92:	93 1e       	adc	r9, r19
     c94:	18 14       	cp	r1, r8
     c96:	19 04       	cpc	r1, r9
     c98:	0c f0       	brlt	.+2      	; 0xc9c <nokia_lcd_write_char+0x3a>
     c9a:	59 c0       	rjmp	.+178    	; 0xd4e <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     c9c:	89 01       	movw	r16, r18
     c9e:	00 0f       	add	r16, r16
     ca0:	11 1f       	adc	r17, r17
     ca2:	00 0f       	add	r16, r16
     ca4:	11 1f       	adc	r17, r17
     ca6:	00 0f       	add	r16, r16
     ca8:	11 1f       	adc	r17, r17
     caa:	02 1b       	sub	r16, r18
     cac:	13 0b       	sbc	r17, r19
     cae:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     cb0:	a8 2e       	mov	r10, r24
     cb2:	b1 2c       	mov	r11, r1
     cb4:	c5 01       	movw	r24, r10
     cb6:	80 97       	sbiw	r24, 0x20	; 32
     cb8:	5c 01       	movw	r10, r24
     cba:	aa 0c       	add	r10, r10
     cbc:	bb 1c       	adc	r11, r11
     cbe:	aa 0c       	add	r10, r10
     cc0:	bb 1c       	adc	r11, r11
     cc2:	a8 0e       	add	r10, r24
     cc4:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     cc6:	0f 2e       	mov	r0, r31
     cc8:	fb e1       	ldi	r31, 0x1B	; 27
     cca:	cf 2e       	mov	r12, r31
     ccc:	f3 e0       	ldi	r31, 0x03	; 3
     cce:	df 2e       	mov	r13, r31
     cd0:	f0 2d       	mov	r31, r0
     cd2:	0f 2e       	mov	r0, r31
     cd4:	fa e1       	ldi	r31, 0x1A	; 26
     cd6:	ef 2e       	mov	r14, r31
     cd8:	f3 e0       	ldi	r31, 0x03	; 3
     cda:	ff 2e       	mov	r15, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	2a c0       	rjmp	.+84     	; 0xd34 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     ce0:	fe 01       	movw	r30, r28
     ce2:	24 91       	lpm	r18, Z
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	87 2d       	mov	r24, r7
     ce8:	65 2d       	mov	r22, r5
     cea:	1d d1       	rcall	.+570    	; 0xf26 <__udivmodqi4>
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <nokia_lcd_write_char+0x90>
     cee:	35 95       	asr	r19
     cf0:	27 95       	ror	r18
     cf2:	8a 95       	dec	r24
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <nokia_lcd_write_char+0x8c>
     cf6:	20 ff       	sbrs	r18, 0
     cf8:	09 c0       	rjmp	.+18     	; 0xd0c <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     cfa:	f6 01       	movw	r30, r12
     cfc:	60 81       	ld	r22, Z
     cfe:	67 0d       	add	r22, r7
     d00:	f7 01       	movw	r30, r14
     d02:	80 81       	ld	r24, Z
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	86 0d       	add	r24, r6
     d08:	81 df       	rcall	.-254    	; 0xc0c <nokia_lcd_set_pixel>
     d0a:	08 c0       	rjmp	.+16     	; 0xd1c <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     d0c:	f6 01       	movw	r30, r12
     d0e:	60 81       	ld	r22, Z
     d10:	67 0d       	add	r22, r7
     d12:	f7 01       	movw	r30, r14
     d14:	80 81       	ld	r24, Z
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	86 0d       	add	r24, r6
     d1a:	78 df       	rcall	.-272    	; 0xc0c <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     d1c:	73 94       	inc	r7
     d1e:	87 2d       	mov	r24, r7
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	80 17       	cp	r24, r16
     d24:	91 07       	cpc	r25, r17
     d26:	e4 f2       	brlt	.-72     	; 0xce0 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     d28:	63 94       	inc	r6
     d2a:	86 2d       	mov	r24, r6
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	88 15       	cp	r24, r8
     d30:	99 05       	cpc	r25, r9
     d32:	6c f4       	brge	.+26     	; 0xd4e <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
     d34:	10 16       	cp	r1, r16
     d36:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     d38:	bc f7       	brge	.-18     	; 0xd28 <nokia_lcd_write_char+0xc6>
     d3a:	86 2d       	mov	r24, r6
     d3c:	65 2d       	mov	r22, r5
     d3e:	f3 d0       	rcall	.+486    	; 0xf26 <__udivmodqi4>
     d40:	e5 01       	movw	r28, r10
     d42:	c8 0f       	add	r28, r24
     d44:	d1 1d       	adc	r29, r1
     d46:	c4 56       	subi	r28, 0x64	; 100
     d48:	df 4f       	sbci	r29, 0xFF	; 255
     d4a:	71 2c       	mov	r7, r1
     d4c:	c9 cf       	rjmp	.-110    	; 0xce0 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     d4e:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <nokia_lcd+0x1f8>
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	98 0f       	add	r25, r24
     d56:	85 2d       	mov	r24, r5
     d58:	88 0f       	add	r24, r24
     d5a:	88 0f       	add	r24, r24
     d5c:	85 0d       	add	r24, r5
     d5e:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
     d60:	84 35       	cpi	r24, 0x54	; 84
     d62:	18 f4       	brcc	.+6      	; 0xd6a <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     d64:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <nokia_lcd+0x1f8>
     d68:	0e c0       	rjmp	.+28     	; 0xd86 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
     d6a:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     d6e:	eb e1       	ldi	r30, 0x1B	; 27
     d70:	f3 e0       	ldi	r31, 0x03	; 3
     d72:	80 81       	ld	r24, Z
     d74:	91 e0       	ldi	r25, 0x01	; 1
     d76:	98 0f       	add	r25, r24
     d78:	85 2d       	mov	r24, r5
     d7a:	88 0f       	add	r24, r24
     d7c:	88 0f       	add	r24, r24
     d7e:	88 0f       	add	r24, r24
     d80:	85 19       	sub	r24, r5
     d82:	89 0f       	add	r24, r25
     d84:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     d86:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <nokia_lcd+0x1f9>
     d8a:	80 33       	cpi	r24, 0x30	; 48
     d8c:	20 f0       	brcs	.+8      	; 0xd96 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
     d8e:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
     d92:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <nokia_lcd+0x1f9>
	}
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	1f 91       	pop	r17
     d9c:	0f 91       	pop	r16
     d9e:	ff 90       	pop	r15
     da0:	ef 90       	pop	r14
     da2:	df 90       	pop	r13
     da4:	cf 90       	pop	r12
     da6:	bf 90       	pop	r11
     da8:	af 90       	pop	r10
     daa:	9f 90       	pop	r9
     dac:	8f 90       	pop	r8
     dae:	7f 90       	pop	r7
     db0:	6f 90       	pop	r6
     db2:	5f 90       	pop	r5
     db4:	08 95       	ret

00000db6 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	ec 01       	movw	r28, r24
	while(*str)
     dbe:	88 81       	ld	r24, Y
     dc0:	88 23       	and	r24, r24
     dc2:	39 f0       	breq	.+14     	; 0xdd2 <nokia_lcd_write_string+0x1c>
     dc4:	16 2f       	mov	r17, r22
     dc6:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
     dc8:	61 2f       	mov	r22, r17
     dca:	4b df       	rcall	.-362    	; 0xc62 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     dcc:	89 91       	ld	r24, Y+
     dce:	81 11       	cpse	r24, r1
     dd0:	fb cf       	rjmp	.-10     	; 0xdc8 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	08 95       	ret

00000dda <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     dda:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
     dde:	60 93 1b 03 	sts	0x031B, r22	; 0x80031b <nokia_lcd+0x1f9>
     de2:	08 95       	ret

00000de4 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	c4 de       	rcall	.-632    	; 0xb78 <write_cmd>
	write_cmd(0x40);
     df0:	80 e4       	ldi	r24, 0x40	; 64
     df2:	c2 de       	rcall	.-636    	; 0xb78 <write_cmd>
     df4:	c2 e2       	ldi	r28, 0x22	; 34
     df6:	d1 e0       	ldi	r29, 0x01	; 1
     df8:	0a e1       	ldi	r16, 0x1A	; 26
     dfa:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	89 91       	ld	r24, Y+
     e00:	9d de       	rcall	.-710    	; 0xb3c <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     e02:	c0 17       	cp	r28, r16
     e04:	d1 07       	cpc	r29, r17
     e06:	d1 f7       	brne	.-12     	; 0xdfc <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	08 95       	ret

00000e12 <initMatrix>:

	while(n--){
		x=3;       //empirically determined fudge factor  16 mhz
		while(x--);
	}
}
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	ed e9       	ldi	r30, 0x9D	; 157
     e18:	f3 e0       	ldi	r31, 0x03	; 3
     e1a:	ce ed       	ldi	r28, 0xDE	; 222
     e1c:	d3 e0       	ldi	r29, 0x03	; 3
     e1e:	ae e1       	ldi	r26, 0x1E	; 30
     e20:	b3 e0       	ldi	r27, 0x03	; 3
     e22:	8d ed       	ldi	r24, 0xDD	; 221
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	11 92       	st	Z+, r1
     e28:	19 92       	st	Y+, r1
     e2a:	1d 92       	st	X+, r1
     e2c:	e8 17       	cp	r30, r24
     e2e:	f9 07       	cpc	r31, r25
     e30:	d1 f7       	brne	.-12     	; 0xe26 <initMatrix+0x14>
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <setLED>:
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	e3 56       	subi	r30, 0x63	; 99
     e3e:	fc 4f       	sbci	r31, 0xFC	; 252
     e40:	60 83       	st	Z, r22
     e42:	fc 01       	movw	r30, r24
     e44:	e2 52       	subi	r30, 0x22	; 34
     e46:	fc 4f       	sbci	r31, 0xFC	; 252
     e48:	40 83       	st	Z, r20
     e4a:	fc 01       	movw	r30, r24
     e4c:	e2 5e       	subi	r30, 0xE2	; 226
     e4e:	fc 4f       	sbci	r31, 0xFC	; 252
     e50:	20 83       	st	Z, r18
     e52:	08 95       	ret

00000e54 <setAllLEDs>:
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	ed e9       	ldi	r30, 0x9D	; 157
     e5a:	f3 e0       	ldi	r31, 0x03	; 3
     e5c:	ce ed       	ldi	r28, 0xDE	; 222
     e5e:	d3 e0       	ldi	r29, 0x03	; 3
     e60:	ae e1       	ldi	r26, 0x1E	; 30
     e62:	b3 e0       	ldi	r27, 0x03	; 3
     e64:	2d ed       	ldi	r18, 0xDD	; 221
     e66:	33 e0       	ldi	r19, 0x03	; 3
     e68:	81 93       	st	Z+, r24
     e6a:	69 93       	st	Y+, r22
     e6c:	4d 93       	st	X+, r20
     e6e:	e2 17       	cp	r30, r18
     e70:	f3 07       	cpc	r31, r19
     e72:	d1 f7       	brne	.-12     	; 0xe68 <setAllLEDs+0x14>
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <send>:
     e7a:	28 e0       	ldi	r18, 0x08	; 8
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	90 e8       	ldi	r25, 0x80	; 128
     e80:	48 2f       	mov	r20, r24
     e82:	49 23       	and	r20, r25
     e84:	81 f0       	breq	.+32     	; 0xea6 <send+0x2c>
     e86:	28 9a       	sbi	0x05, 0	; 5
	...
     e94:	28 98       	cbi	0x05, 0	; 5
	...
     ea2:	00 00       	nop
     ea4:	0a c0       	rjmp	.+20     	; 0xeba <send+0x40>
     ea6:	28 9a       	sbi	0x05, 0	; 5
     ea8:	00 00       	nop
     eaa:	28 98       	cbi	0x05, 0	; 5
	...
     eb8:	00 00       	nop
     eba:	96 95       	lsr	r25
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	31 09       	sbc	r19, r1
     ec0:	f9 f6       	brne	.-66     	; 0xe80 <send+0x6>
     ec2:	08 95       	ret

00000ec4 <RES>:

void RES()
{
	TOff(); delnus(55);
     ec4:	28 98       	cbi	0x05, 0	; 5
     ec6:	08 95       	ret

00000ec8 <cycle>:
		}
	}
}

void cycle()
{
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	cd e9       	ldi	r28, 0x9D	; 157
     eda:	d3 e0       	ldi	r29, 0x03	; 3
     edc:	0f 2e       	mov	r0, r31
     ede:	fe e1       	ldi	r31, 0x1E	; 30
     ee0:	ef 2e       	mov	r14, r31
     ee2:	f3 e0       	ldi	r31, 0x03	; 3
     ee4:	ff 2e       	mov	r15, r31
     ee6:	f0 2d       	mov	r31, r0
     ee8:	0e ed       	ldi	r16, 0xDE	; 222
     eea:	13 e0       	ldi	r17, 0x03	; 3
     eec:	0f 2e       	mov	r0, r31
     eee:	fd ed       	ldi	r31, 0xDD	; 221
     ef0:	cf 2e       	mov	r12, r31
     ef2:	f3 e0       	ldi	r31, 0x03	; 3
     ef4:	df 2e       	mov	r13, r31
     ef6:	f0 2d       	mov	r31, r0
	pr=r; //init pointers
	pg=g;
	pb=b;
	n=64;
	while(n--){    //update 30 leds
		send(*pg++);
     ef8:	89 91       	ld	r24, Y+
     efa:	bf df       	rcall	.-130    	; 0xe7a <send>
		send(*pb++);
     efc:	f7 01       	movw	r30, r14
     efe:	81 91       	ld	r24, Z+
     f00:	7f 01       	movw	r14, r30
     f02:	bb df       	rcall	.-138    	; 0xe7a <send>
		send(*pr++);
     f04:	f8 01       	movw	r30, r16
     f06:	81 91       	ld	r24, Z+
     f08:	8f 01       	movw	r16, r30
     f0a:	b7 df       	rcall	.-146    	; 0xe7a <send>

	pr=r; //init pointers
	pg=g;
	pb=b;
	n=64;
	while(n--){    //update 30 leds
     f0c:	cc 15       	cp	r28, r12
     f0e:	dd 05       	cpc	r29, r13
		send(*pg++);
		send(*pb++);
		send(*pr++);
	}
	RES();
     f10:	99 f7       	brne	.-26     	; 0xef8 <cycle+0x30>
     f12:	d8 df       	rcall	.-80     	; 0xec4 <RES>
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	08 95       	ret

00000f26 <__udivmodqi4>:
     f26:	99 1b       	sub	r25, r25
     f28:	79 e0       	ldi	r23, 0x09	; 9
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <__udivmodqi4_ep>

00000f2c <__udivmodqi4_loop>:
     f2c:	99 1f       	adc	r25, r25
     f2e:	96 17       	cp	r25, r22
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__udivmodqi4_ep>
     f32:	96 1b       	sub	r25, r22

00000f34 <__udivmodqi4_ep>:
     f34:	88 1f       	adc	r24, r24
     f36:	7a 95       	dec	r23
     f38:	c9 f7       	brne	.-14     	; 0xf2c <__udivmodqi4_loop>
     f3a:	80 95       	com	r24
     f3c:	08 95       	ret

00000f3e <__tablejump2__>:
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	00 24       	eor	r0, r0
     f44:	00 1c       	adc	r0, r0
     f46:	0b be       	out	0x3b, r0	; 59
     f48:	07 90       	elpm	r0, Z+
     f4a:	f6 91       	elpm	r31, Z
     f4c:	e0 2d       	mov	r30, r0
     f4e:	09 94       	ijmp

00000f50 <do_rand>:
     f50:	8f 92       	push	r8
     f52:	9f 92       	push	r9
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	68 81       	ld	r22, Y
     f68:	79 81       	ldd	r23, Y+1	; 0x01
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	9b 81       	ldd	r25, Y+3	; 0x03
     f6e:	61 15       	cp	r22, r1
     f70:	71 05       	cpc	r23, r1
     f72:	81 05       	cpc	r24, r1
     f74:	91 05       	cpc	r25, r1
     f76:	21 f4       	brne	.+8      	; 0xf80 <do_rand+0x30>
     f78:	64 e2       	ldi	r22, 0x24	; 36
     f7a:	79 ed       	ldi	r23, 0xD9	; 217
     f7c:	8b e5       	ldi	r24, 0x5B	; 91
     f7e:	97 e0       	ldi	r25, 0x07	; 7
     f80:	2d e1       	ldi	r18, 0x1D	; 29
     f82:	33 ef       	ldi	r19, 0xF3	; 243
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	38 d0       	rcall	.+112    	; 0xffa <__divmodsi4>
     f8a:	49 01       	movw	r8, r18
     f8c:	5a 01       	movw	r10, r20
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	a7 ea       	ldi	r26, 0xA7	; 167
     f94:	b1 e4       	ldi	r27, 0x41	; 65
     f96:	4d d0       	rcall	.+154    	; 0x1032 <__muluhisi3>
     f98:	6b 01       	movw	r12, r22
     f9a:	7c 01       	movw	r14, r24
     f9c:	ac ee       	ldi	r26, 0xEC	; 236
     f9e:	b4 ef       	ldi	r27, 0xF4	; 244
     fa0:	a5 01       	movw	r20, r10
     fa2:	94 01       	movw	r18, r8
     fa4:	52 d0       	rcall	.+164    	; 0x104a <__mulohisi3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	8c 0d       	add	r24, r12
     fac:	9d 1d       	adc	r25, r13
     fae:	ae 1d       	adc	r26, r14
     fb0:	bf 1d       	adc	r27, r15
     fb2:	b7 ff       	sbrs	r27, 7
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <do_rand+0x6c>
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	a1 09       	sbc	r26, r1
     fba:	b0 48       	sbci	r27, 0x80	; 128
     fbc:	88 83       	st	Y, r24
     fbe:	99 83       	std	Y+1, r25	; 0x01
     fc0:	aa 83       	std	Y+2, r26	; 0x02
     fc2:	bb 83       	std	Y+3, r27	; 0x03
     fc4:	9f 77       	andi	r25, 0x7F	; 127
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	08 95       	ret

00000fdc <rand_r>:
     fdc:	b9 cf       	rjmp	.-142    	; 0xf50 <do_rand>

00000fde <rand>:
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	b6 cf       	rjmp	.-148    	; 0xf50 <do_rand>

00000fe4 <srand>:
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     fec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     ff0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     ff4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
     ff8:	08 95       	ret

00000ffa <__divmodsi4>:
     ffa:	05 2e       	mov	r0, r21
     ffc:	97 fb       	bst	r25, 7
     ffe:	16 f4       	brtc	.+4      	; 0x1004 <__divmodsi4+0xa>
    1000:	00 94       	com	r0
    1002:	0f d0       	rcall	.+30     	; 0x1022 <__negsi2>
    1004:	57 fd       	sbrc	r21, 7
    1006:	05 d0       	rcall	.+10     	; 0x1012 <__divmodsi4_neg2>
    1008:	24 d0       	rcall	.+72     	; 0x1052 <__udivmodsi4>
    100a:	07 fc       	sbrc	r0, 7
    100c:	02 d0       	rcall	.+4      	; 0x1012 <__divmodsi4_neg2>
    100e:	46 f4       	brtc	.+16     	; 0x1020 <__divmodsi4_exit>
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <__negsi2>

00001012 <__divmodsi4_neg2>:
    1012:	50 95       	com	r21
    1014:	40 95       	com	r20
    1016:	30 95       	com	r19
    1018:	21 95       	neg	r18
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	4f 4f       	sbci	r20, 0xFF	; 255
    101e:	5f 4f       	sbci	r21, 0xFF	; 255

00001020 <__divmodsi4_exit>:
    1020:	08 95       	ret

00001022 <__negsi2>:
    1022:	90 95       	com	r25
    1024:	80 95       	com	r24
    1026:	70 95       	com	r23
    1028:	61 95       	neg	r22
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8f 4f       	sbci	r24, 0xFF	; 255
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	08 95       	ret

00001032 <__muluhisi3>:
    1032:	31 d0       	rcall	.+98     	; 0x1096 <__umulhisi3>
    1034:	a5 9f       	mul	r26, r21
    1036:	90 0d       	add	r25, r0
    1038:	b4 9f       	mul	r27, r20
    103a:	90 0d       	add	r25, r0
    103c:	a4 9f       	mul	r26, r20
    103e:	80 0d       	add	r24, r0
    1040:	91 1d       	adc	r25, r1
    1042:	11 24       	eor	r1, r1
    1044:	08 95       	ret

00001046 <__mulshisi3>:
    1046:	b7 ff       	sbrs	r27, 7
    1048:	f4 cf       	rjmp	.-24     	; 0x1032 <__muluhisi3>

0000104a <__mulohisi3>:
    104a:	f3 df       	rcall	.-26     	; 0x1032 <__muluhisi3>
    104c:	82 1b       	sub	r24, r18
    104e:	93 0b       	sbc	r25, r19
    1050:	08 95       	ret

00001052 <__udivmodsi4>:
    1052:	a1 e2       	ldi	r26, 0x21	; 33
    1054:	1a 2e       	mov	r1, r26
    1056:	aa 1b       	sub	r26, r26
    1058:	bb 1b       	sub	r27, r27
    105a:	fd 01       	movw	r30, r26
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <__udivmodsi4_ep>

0000105e <__udivmodsi4_loop>:
    105e:	aa 1f       	adc	r26, r26
    1060:	bb 1f       	adc	r27, r27
    1062:	ee 1f       	adc	r30, r30
    1064:	ff 1f       	adc	r31, r31
    1066:	a2 17       	cp	r26, r18
    1068:	b3 07       	cpc	r27, r19
    106a:	e4 07       	cpc	r30, r20
    106c:	f5 07       	cpc	r31, r21
    106e:	20 f0       	brcs	.+8      	; 0x1078 <__udivmodsi4_ep>
    1070:	a2 1b       	sub	r26, r18
    1072:	b3 0b       	sbc	r27, r19
    1074:	e4 0b       	sbc	r30, r20
    1076:	f5 0b       	sbc	r31, r21

00001078 <__udivmodsi4_ep>:
    1078:	66 1f       	adc	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	1a 94       	dec	r1
    1082:	69 f7       	brne	.-38     	; 0x105e <__udivmodsi4_loop>
    1084:	60 95       	com	r22
    1086:	70 95       	com	r23
    1088:	80 95       	com	r24
    108a:	90 95       	com	r25
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	bd 01       	movw	r22, r26
    1092:	cf 01       	movw	r24, r30
    1094:	08 95       	ret

00001096 <__umulhisi3>:
    1096:	a2 9f       	mul	r26, r18
    1098:	b0 01       	movw	r22, r0
    109a:	b3 9f       	mul	r27, r19
    109c:	c0 01       	movw	r24, r0
    109e:	a3 9f       	mul	r26, r19
    10a0:	70 0d       	add	r23, r0
    10a2:	81 1d       	adc	r24, r1
    10a4:	11 24       	eor	r1, r1
    10a6:	91 1d       	adc	r25, r1
    10a8:	b2 9f       	mul	r27, r18
    10aa:	70 0d       	add	r23, r0
    10ac:	81 1d       	adc	r24, r1
    10ae:	11 24       	eor	r1, r1
    10b0:	91 1d       	adc	r25, r1
    10b2:	08 95       	ret

000010b4 <_exit>:
    10b4:	f8 94       	cli

000010b6 <__stop_program>:
    10b6:	ff cf       	rjmp	.-2      	; 0x10b6 <__stop_program>
