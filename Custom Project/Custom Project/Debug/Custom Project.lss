
Custom Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  000018ae  00001942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000509  00800168  00800168  000019aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000267d  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4f  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000157b  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00006754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000af3  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c7e  00000000  00000000  0000780f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000948d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c1       	rjmp	.+648    	; 0x28a <__ctors_end>
       2:	00 00       	nop
       4:	60 c1       	rjmp	.+704    	; 0x2c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c1       	rjmp	.+700    	; 0x2c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c1       	rjmp	.+696    	; 0x2c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c1       	rjmp	.+692    	; 0x2c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c1       	rjmp	.+688    	; 0x2c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c1       	rjmp	.+684    	; 0x2c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c1       	rjmp	.+680    	; 0x2c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c1       	rjmp	.+676    	; 0x2c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c1       	rjmp	.+672    	; 0x2c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c1       	rjmp	.+668    	; 0x2c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c1       	rjmp	.+664    	; 0x2c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c1       	rjmp	.+660    	; 0x2c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c3       	rjmp	.+1862   	; 0x77c <__vector_13>
      36:	00 00       	nop
      38:	46 c1       	rjmp	.+652    	; 0x2c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c1       	rjmp	.+648    	; 0x2c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c1       	rjmp	.+644    	; 0x2c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c1       	rjmp	.+640    	; 0x2c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c1       	rjmp	.+636    	; 0x2c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c1       	rjmp	.+632    	; 0x2c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c1       	rjmp	.+628    	; 0x2c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c1       	rjmp	.+624    	; 0x2c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c1       	rjmp	.+620    	; 0x2c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c1       	rjmp	.+616    	; 0x2c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c1       	rjmp	.+612    	; 0x2c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c1       	rjmp	.+608    	; 0x2c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c1       	rjmp	.+604    	; 0x2c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c1       	rjmp	.+600    	; 0x2c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c1       	rjmp	.+596    	; 0x2c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c1       	rjmp	.+592    	; 0x2c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c1       	rjmp	.+588    	; 0x2c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c1       	rjmp	.+584    	; 0x2c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c1       	rjmp	.+580    	; 0x2c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c1       	rjmp	.+576    	; 0x2c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c1       	rjmp	.+572    	; 0x2c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a 06       	cpc	r2, r26
      8e:	33 06       	cpc	r3, r19
      90:	44 06       	cpc	r4, r20
      92:	4d 06       	cpc	r4, r29
      94:	5c 06       	cpc	r5, r28
      96:	64 06       	cpc	r6, r20
      98:	73 06       	cpc	r7, r19
      9a:	7b 06       	cpc	r7, r27
      9c:	49 09       	sbc	r20, r9
      9e:	5c 09       	sbc	r21, r12
      a0:	1d 09       	sbc	r17, r13
      a2:	72 09       	sbc	r23, r2
      a4:	38 09       	sbc	r19, r8
      a6:	1a 09       	sbc	r17, r10
      a8:	3d 09       	sbc	r19, r13

000000aa <CHARSET>:
      aa:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      ba:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      ca:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      da:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      ea:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      fa:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     10a:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     11a:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     12a:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     13a:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     14a:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     15a:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     16a:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     17a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     18a:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     19a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1aa:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1ba:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1ca:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1da:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1ea:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1fa:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     20a:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     21a:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     22a:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     23a:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     24a:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     25a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     26a:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     27a:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

0000028a <__ctors_end>:
     28a:	11 24       	eor	r1, r1
     28c:	1f be       	out	0x3f, r1	; 63
     28e:	cf ef       	ldi	r28, 0xFF	; 255
     290:	d0 e4       	ldi	r29, 0x40	; 64
     292:	de bf       	out	0x3e, r29	; 62
     294:	cd bf       	out	0x3d, r28	; 61

00000296 <__do_copy_data>:
     296:	11 e0       	ldi	r17, 0x01	; 1
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b1 e0       	ldi	r27, 0x01	; 1
     29c:	ee ea       	ldi	r30, 0xAE	; 174
     29e:	f8 e1       	ldi	r31, 0x18	; 24
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0b bf       	out	0x3b, r16	; 59
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x14>
     2a6:	07 90       	elpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a8 36       	cpi	r26, 0x68	; 104
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0x10>

000002b0 <__do_clear_bss>:
     2b0:	26 e0       	ldi	r18, 0x06	; 6
     2b2:	a8 e6       	ldi	r26, 0x68	; 104
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
     2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
     2ba:	a1 37       	cpi	r26, 0x71	; 113
     2bc:	b2 07       	cpc	r27, r18
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
     2c0:	b1 d3       	rcall	.+1890   	; 0xa24 <main>
     2c2:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <_exit>

000002c6 <__bad_interrupt>:
     2c6:	9c ce       	rjmp	.-712    	; 0x0 <__vectors>

000002c8 <ADC_Init>:
{
	//DDRA = 0x00;		/* Make ADC port as input */
	//ADCSRA = 0x87;		/* Enable ADC, fr/128  */
	//ADMUX = 0x40;		/* Vref: Avcc, ADC channel: 0 */
	
	ADCSRA |= (1 << ADEN) | (1 << ADSC);
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 6c       	ori	r24, 0xC0	; 192
     2d0:	80 83       	st	Z, r24
     2d2:	08 95       	ret

000002d4 <ADC_Read>:
	//ADC_value = (int)ADCL;	/* read lower byte */
	//ADC_value = ADC_value + (int)ADCH*256;/* read higher 2 bits, Multiply with weightage */

	//return ADC;		/* return digital value */
	
	if(channel == 0x00)
     2d4:	81 11       	cpse	r24, r1
     2d6:	06 c0       	rjmp	.+12     	; 0x2e4 <ADC_Read+0x10>
	{
		ADMUX &= 0xFE;
     2d8:	ec e7       	ldi	r30, 0x7C	; 124
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	8e 7f       	andi	r24, 0xFE	; 254
     2e0:	80 83       	st	Z, r24
     2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <ADC_Read+0x1e>
	}
	else if(channel == 0x01)
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	29 f4       	brne	.+10     	; 0x2f2 <ADC_Read+0x1e>
	{
		ADMUX |= 0x01;
     2e8:	ec e7       	ldi	r30, 0x7C	; 124
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	81 60       	ori	r24, 0x01	; 1
     2f0:	80 83       	st	Z, r24
	}
	
	ADCSRA |= (1 << ADSC);
     2f2:	ea e7       	ldi	r30, 0x7A	; 122
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	80 64       	ori	r24, 0x40	; 64
     2fa:	80 83       	st	Z, r24
	//while (!(ADCSRA & (1<<ADSC)));
	
	return ADC;
     2fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     300:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     304:	08 95       	ret

00000306 <TickFct_Countdown>:
}

unsigned char getYIndex(unsigned char i)
{
	return i / 8;
}
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	21 f0       	breq	.+8      	; 0x312 <TickFct_Countdown+0xc>
     30a:	6c f1       	brlt	.+90     	; 0x366 <TickFct_Countdown+0x60>
     30c:	03 97       	sbiw	r24, 0x03	; 3
     30e:	5c f0       	brlt	.+22     	; 0x326 <TickFct_Countdown+0x20>
     310:	2a c0       	rjmp	.+84     	; 0x366 <TickFct_Countdown+0x60>
     312:	8c e3       	ldi	r24, 0x3C	; 60
     314:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <countdown>
     318:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <gameFinished>
     31c:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	08 95       	ret
     326:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <countdown>
     32a:	81 11       	cpse	r24, r1
     32c:	06 c0       	rjmp	.+12     	; 0x33a <TickFct_Countdown+0x34>
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <gameFinished>
     334:	82 e0       	ldi	r24, 0x02	; 2
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	08 95       	ret
     33a:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <fallFinished>
     33e:	99 23       	and	r25, r25
     340:	a9 f0       	breq	.+42     	; 0x36c <TickFct_Countdown+0x66>
     342:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <__data_end>
     346:	98 30       	cpi	r25, 0x08	; 8
     348:	40 f0       	brcs	.+16     	; 0x35a <TickFct_Countdown+0x54>
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <countdown>
     350:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret
     35a:	9f 5f       	subi	r25, 0xFF	; 255
     35c:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <__data_end>
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	08 95       	ret

00000372 <TickFct_Input>:
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	91 05       	cpc	r25, r1
     376:	41 f0       	breq	.+16     	; 0x388 <TickFct_Input+0x16>
     378:	82 30       	cpi	r24, 0x02	; 2
     37a:	91 05       	cpc	r25, r1
     37c:	69 f0       	breq	.+26     	; 0x398 <TickFct_Input+0x26>
     37e:	89 2b       	or	r24, r25
     380:	41 f0       	breq	.+16     	; 0x392 <TickFct_Input+0x20>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	08 95       	ret
     388:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <seed+0x1>
     38c:	10 92 61 05 	sts	0x0561, r1	; 0x800561 <seed>
     390:	03 c0       	rjmp	.+6      	; 0x398 <TickFct_Input+0x26>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	08 95       	ret
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	9c df       	rcall	.-200    	; 0x2d4 <ADC_Read>
     39c:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <ADC_X+0x1>
     3a0:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <ADC_X>
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	96 df       	rcall	.-212    	; 0x2d4 <ADC_Read>
     3a8:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <ADC_Y+0x1>
     3ac:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <ADC_Y>
     3b0:	80 b1       	in	r24, 0x00	; 0
     3b2:	80 95       	com	r24
     3b4:	84 70       	andi	r24, 0x04	; 4
     3b6:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <bnPress>
     3ba:	80 b1       	in	r24, 0x00	; 0
     3bc:	80 95       	com	r24
     3be:	88 70       	andi	r24, 0x08	; 8
     3c0:	80 93 5f 05 	sts	0x055F, r24	; 0x80055f <rsPress>
     3c4:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <seed>
     3c8:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <seed+0x1>
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <seed+0x1>
     3d2:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <seed>
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 95       	ret

000003dc <TickFct_Nokia>:
     3dc:	8f 92       	push	r8
     3de:	9f 92       	push	r9
     3e0:	af 92       	push	r10
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	ec 01       	movw	r28, r24
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	91 05       	cpc	r25, r1
     3f6:	09 f4       	brne	.+2      	; 0x3fa <TickFct_Nokia+0x1e>
     3f8:	c0 c0       	rjmp	.+384    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     3fa:	34 f4       	brge	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	85 c0       	rjmp	.+266    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	41 f0       	breq	.+16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     406:	62 c0       	rjmp	.+196    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     408:	83 30       	cpi	r24, 0x03	; 3
     40a:	91 05       	cpc	r25, r1
     40c:	49 f0       	breq	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     40e:	04 97       	sbiw	r24, 0x04	; 4
     410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	2c c1       	rjmp	.+600    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     414:	5b c0       	rjmp	.+182    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     416:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <bnPress>
     41a:	81 11       	cpse	r24, r1
     41c:	a7 c0       	rjmp	.+334    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     41e:	76 c0       	rjmp	.+236    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     420:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <gameFinished>
     424:	88 23       	and	r24, r24
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	a8 c0       	rjmp	.+336    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     42a:	c0 90 89 04 	lds	r12, 0x0489	; 0x800489 <score>
     42e:	d0 90 8a 04 	lds	r13, 0x048A	; 0x80048a <score+0x1>
     432:	e0 90 8b 04 	lds	r14, 0x048B	; 0x80048b <score+0x2>
     436:	f0 90 8c 04 	lds	r15, 0x048C	; 0x80048c <score+0x3>
     43a:	c9 ea       	ldi	r28, 0xA9	; 169
     43c:	d5 e0       	ldi	r29, 0x05	; 5
     43e:	c7 01       	movw	r24, r14
     440:	b6 01       	movw	r22, r12
     442:	20 e1       	ldi	r18, 0x10	; 16
     444:	37 e2       	ldi	r19, 0x27	; 39
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     44e:	20 5d       	subi	r18, 0xD0	; 208
     450:	28 83       	st	Y, r18
     452:	0f 2e       	mov	r0, r31
     454:	f8 ee       	ldi	r31, 0xE8	; 232
     456:	8f 2e       	mov	r8, r31
     458:	f3 e0       	ldi	r31, 0x03	; 3
     45a:	9f 2e       	mov	r9, r31
     45c:	a1 2c       	mov	r10, r1
     45e:	b1 2c       	mov	r11, r1
     460:	f0 2d       	mov	r31, r0
     462:	a5 01       	movw	r20, r10
     464:	94 01       	movw	r18, r8
     466:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     46a:	20 5d       	subi	r18, 0xD0	; 208
     46c:	29 83       	std	Y+1, r18	; 0x01
     46e:	c7 01       	movw	r24, r14
     470:	b6 01       	movw	r22, r12
     472:	a5 01       	movw	r20, r10
     474:	94 01       	movw	r18, r8
     476:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     47a:	0f 2e       	mov	r0, r31
     47c:	f4 e6       	ldi	r31, 0x64	; 100
     47e:	8f 2e       	mov	r8, r31
     480:	91 2c       	mov	r9, r1
     482:	a1 2c       	mov	r10, r1
     484:	b1 2c       	mov	r11, r1
     486:	f0 2d       	mov	r31, r0
     488:	a5 01       	movw	r20, r10
     48a:	94 01       	movw	r18, r8
     48c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     490:	20 5d       	subi	r18, 0xD0	; 208
     492:	2a 83       	std	Y+2, r18	; 0x02
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	a5 01       	movw	r20, r10
     49a:	94 01       	movw	r18, r8
     49c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     4a0:	0f 2e       	mov	r0, r31
     4a2:	fa e0       	ldi	r31, 0x0A	; 10
     4a4:	8f 2e       	mov	r8, r31
     4a6:	91 2c       	mov	r9, r1
     4a8:	a1 2c       	mov	r10, r1
     4aa:	b1 2c       	mov	r11, r1
     4ac:	f0 2d       	mov	r31, r0
     4ae:	a5 01       	movw	r20, r10
     4b0:	94 01       	movw	r18, r8
     4b2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     4b6:	20 5d       	subi	r18, 0xD0	; 208
     4b8:	2b 83       	std	Y+3, r18	; 0x03
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	a5 01       	movw	r20, r10
     4c0:	94 01       	movw	r18, r8
     4c2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     4c6:	60 5d       	subi	r22, 0xD0	; 208
     4c8:	6c 83       	std	Y+4, r22	; 0x04
     4ca:	d0 c0       	rjmp	.+416    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     4cc:	c2 30       	cpi	r28, 0x02	; 2
     4ce:	d1 05       	cpc	r29, r1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	4c c0       	rjmp	.+152    	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     4d4:	3c f4       	brge	.+14     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4d6:	20 97       	sbiw	r28, 0x00	; 0
     4d8:	71 f0       	breq	.+28     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4da:	c1 30       	cpi	r28, 0x01	; 1
     4dc:	d1 05       	cpc	r29, r1
     4de:	09 f0       	breq	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e0:	de c0       	rjmp	.+444    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     4e2:	14 c0       	rjmp	.+40     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4e4:	c3 30       	cpi	r28, 0x03	; 3
     4e6:	d1 05       	cpc	r29, r1
     4e8:	09 f4       	brne	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ea:	47 c0       	rjmp	.+142    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     4ec:	c4 30       	cpi	r28, 0x04	; 4
     4ee:	d1 05       	cpc	r29, r1
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	d5 c0       	rjmp	.+426    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     4f4:	bb c0       	rjmp	.+374    	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     4f6:	58 d7       	rcall	.+3760   	; 0x13a8 <nokia_lcd_clear>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nokia_lcd_set_cursor>
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	0e 94 ba 0a 	call	0x1574	; 0x1574 <nokia_lcd_write_string>
     50a:	c9 c0       	rjmp	.+402    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     50c:	4d d7       	rcall	.+3738   	; 0x13a8 <nokia_lcd_clear>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nokia_lcd_set_cursor>
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	8e e0       	ldi	r24, 0x0E	; 14
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <nokia_lcd_write_string>
     520:	6f e0       	ldi	r22, 0x0F	; 15
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nokia_lcd_set_cursor>
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	8b e1       	ldi	r24, 0x1B	; 27
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <nokia_lcd_write_string>
     532:	6e e1       	ldi	r22, 0x1E	; 30
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <nokia_lcd_set_cursor>
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	87 e2       	ldi	r24, 0x27	; 39
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 ba 0a 	call	0x1574	; 0x1574 <nokia_lcd_write_string>
     544:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <startGame>
     548:	80 e2       	ldi	r24, 0x20	; 32
     54a:	90 e2       	ldi	r25, 0x20	; 32
     54c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <strOut+0x1>
     550:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <strOut>
     554:	8c e0       	ldi	r24, 0x0C	; 12
     556:	e4 e4       	ldi	r30, 0x44	; 68
     558:	f1 e0       	ldi	r31, 0x01	; 1
     55a:	af e4       	ldi	r26, 0x4F	; 79
     55c:	b5 e0       	ldi	r27, 0x05	; 5
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     566:	c1 e0       	ldi	r28, 0x01	; 1
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	99 c0       	rjmp	.+306    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     56c:	1d d7       	rcall	.+3642   	; 0x13a8 <nokia_lcd_clear>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <startGame>
     574:	c2 e0       	ldi	r28, 0x02	; 2
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	92 c0       	rjmp	.+292    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     57a:	90 91 5e 05 	lds	r25, 0x055E	; 0x80055e <countdown>
     57e:	e6 e6       	ldi	r30, 0x66	; 102
     580:	f5 e0       	ldi	r31, 0x05	; 5
     582:	8d ec       	ldi	r24, 0xCD	; 205
     584:	98 9f       	mul	r25, r24
     586:	81 2d       	mov	r24, r1
     588:	11 24       	eor	r1, r1
     58a:	86 95       	lsr	r24
     58c:	86 95       	lsr	r24
     58e:	86 95       	lsr	r24
     590:	20 e3       	ldi	r18, 0x30	; 48
     592:	28 0f       	add	r18, r24
     594:	20 83       	st	Z, r18
     596:	88 0f       	add	r24, r24
     598:	28 2f       	mov	r18, r24
     59a:	22 0f       	add	r18, r18
     59c:	22 0f       	add	r18, r18
     59e:	82 0f       	add	r24, r18
     5a0:	98 1b       	sub	r25, r24
     5a2:	90 5d       	subi	r25, 0xD0	; 208
     5a4:	91 83       	std	Z+1, r25	; 0x01
     5a6:	c0 90 89 04 	lds	r12, 0x0489	; 0x800489 <score>
     5aa:	d0 90 8a 04 	lds	r13, 0x048A	; 0x80048a <score+0x1>
     5ae:	e0 90 8b 04 	lds	r14, 0x048B	; 0x80048b <score+0x2>
     5b2:	f0 90 8c 04 	lds	r15, 0x048C	; 0x80048c <score+0x3>
     5b6:	cf e4       	ldi	r28, 0x4F	; 79
     5b8:	d5 e0       	ldi	r29, 0x05	; 5
     5ba:	c7 01       	movw	r24, r14
     5bc:	b6 01       	movw	r22, r12
     5be:	20 e1       	ldi	r18, 0x10	; 16
     5c0:	37 e2       	ldi	r19, 0x27	; 39
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     5ca:	20 5d       	subi	r18, 0xD0	; 208
     5cc:	2f 83       	std	Y+7, r18	; 0x07
     5ce:	0f 2e       	mov	r0, r31
     5d0:	f8 ee       	ldi	r31, 0xE8	; 232
     5d2:	8f 2e       	mov	r8, r31
     5d4:	f3 e0       	ldi	r31, 0x03	; 3
     5d6:	9f 2e       	mov	r9, r31
     5d8:	a1 2c       	mov	r10, r1
     5da:	b1 2c       	mov	r11, r1
     5dc:	f0 2d       	mov	r31, r0
     5de:	a5 01       	movw	r20, r10
     5e0:	94 01       	movw	r18, r8
     5e2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     5e6:	20 5d       	subi	r18, 0xD0	; 208
     5e8:	28 87       	std	Y+8, r18	; 0x08
     5ea:	c7 01       	movw	r24, r14
     5ec:	b6 01       	movw	r22, r12
     5ee:	a5 01       	movw	r20, r10
     5f0:	94 01       	movw	r18, r8
     5f2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f4 e6       	ldi	r31, 0x64	; 100
     5fa:	8f 2e       	mov	r8, r31
     5fc:	91 2c       	mov	r9, r1
     5fe:	a1 2c       	mov	r10, r1
     600:	b1 2c       	mov	r11, r1
     602:	f0 2d       	mov	r31, r0
     604:	a5 01       	movw	r20, r10
     606:	94 01       	movw	r18, r8
     608:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     60c:	20 5d       	subi	r18, 0xD0	; 208
     60e:	29 87       	std	Y+9, r18	; 0x09
     610:	c7 01       	movw	r24, r14
     612:	b6 01       	movw	r22, r12
     614:	a5 01       	movw	r20, r10
     616:	94 01       	movw	r18, r8
     618:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     61c:	0f 2e       	mov	r0, r31
     61e:	fa e0       	ldi	r31, 0x0A	; 10
     620:	8f 2e       	mov	r8, r31
     622:	91 2c       	mov	r9, r1
     624:	a1 2c       	mov	r10, r1
     626:	b1 2c       	mov	r11, r1
     628:	f0 2d       	mov	r31, r0
     62a:	a5 01       	movw	r20, r10
     62c:	94 01       	movw	r18, r8
     62e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     632:	20 5d       	subi	r18, 0xD0	; 208
     634:	2a 87       	std	Y+10, r18	; 0x0a
     636:	c7 01       	movw	r24, r14
     638:	b6 01       	movw	r22, r12
     63a:	a5 01       	movw	r20, r10
     63c:	94 01       	movw	r18, r8
     63e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     642:	60 5d       	subi	r22, 0xD0	; 208
     644:	6b 87       	std	Y+11, r22	; 0x0b
     646:	b0 d6       	rcall	.+3424   	; 0x13a8 <nokia_lcd_clear>
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	80 e2       	ldi	r24, 0x20	; 32
     64c:	c1 d7       	rcall	.+3970   	; 0x15d0 <nokia_lcd_set_cursor>
     64e:	42 e0       	ldi	r20, 0x02	; 2
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	86 e6       	ldi	r24, 0x66	; 102
     654:	95 e0       	ldi	r25, 0x05	; 5
     656:	a0 d7       	rcall	.+3904   	; 0x1598 <nokia_lcd_write_string_with_size>
     658:	6e e1       	ldi	r22, 0x1E	; 30
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	b9 d7       	rcall	.+3954   	; 0x15d0 <nokia_lcd_set_cursor>
     65e:	4c e0       	ldi	r20, 0x0C	; 12
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	ce 01       	movw	r24, r28
     664:	99 d7       	rcall	.+3890   	; 0x1598 <nokia_lcd_write_string_with_size>
     666:	c3 e0       	ldi	r28, 0x03	; 3
     668:	d0 e0       	ldi	r29, 0x00	; 0
     66a:	19 c0       	rjmp	.+50     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
     66c:	9d d6       	rcall	.+3386   	; 0x13a8 <nokia_lcd_clear>
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	80 e1       	ldi	r24, 0x10	; 16
     672:	ae d7       	rcall	.+3932   	; 0x15d0 <nokia_lcd_set_cursor>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	81 e5       	ldi	r24, 0x51	; 81
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	7c d7       	rcall	.+3832   	; 0x1574 <nokia_lcd_write_string>
     67c:	64 e1       	ldi	r22, 0x14	; 20
     67e:	8a e0       	ldi	r24, 0x0A	; 10
     680:	a7 d7       	rcall	.+3918   	; 0x15d0 <nokia_lcd_set_cursor>
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	8b e5       	ldi	r24, 0x5B	; 91
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	75 d7       	rcall	.+3818   	; 0x1574 <nokia_lcd_write_string>
     68a:	6e e1       	ldi	r22, 0x1E	; 30
     68c:	8c e1       	ldi	r24, 0x1C	; 28
     68e:	a0 d7       	rcall	.+3904   	; 0x15d0 <nokia_lcd_set_cursor>
     690:	45 e0       	ldi	r20, 0x05	; 5
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	89 ea       	ldi	r24, 0xA9	; 169
     696:	95 e0       	ldi	r25, 0x05	; 5
     698:	7f d7       	rcall	.+3838   	; 0x1598 <nokia_lcd_write_string_with_size>
     69a:	c4 e0       	ldi	r28, 0x04	; 4
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	9d d7       	rcall	.+3898   	; 0x15da <nokia_lcd_render>
     6a0:	ce 01       	movw	r24, r28
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	ff 90       	pop	r15
     6a8:	ef 90       	pop	r14
     6aa:	df 90       	pop	r13
     6ac:	cf 90       	pop	r12
     6ae:	bf 90       	pop	r11
     6b0:	af 90       	pop	r10
     6b2:	9f 90       	pop	r9
     6b4:	8f 90       	pop	r8
     6b6:	08 95       	ret

000006b8 <TimerOn>:
     6b8:	8b e0       	ldi	r24, 0x0B	; 11
     6ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     6be:	8d e7       	ldi	r24, 0x7D	; 125
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     6c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     6d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     6d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     6d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     6dc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     6e0:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     6e4:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     6e8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_avr_timer_cntcurr>
     6ec:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_avr_timer_cntcurr+0x1>
     6f0:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <_avr_timer_cntcurr+0x2>
     6f4:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <_avr_timer_cntcurr+0x3>
     6f8:	8f b7       	in	r24, 0x3f	; 63
     6fa:	80 68       	ori	r24, 0x80	; 128
     6fc:	8f bf       	out	0x3f, r24	; 63
     6fe:	08 95       	ret

00000700 <TimerISR>:
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd ea       	ldi	r28, 0xAD	; 173
     70e:	d3 e0       	ldi	r29, 0x03	; 3
     710:	0f 2e       	mov	r0, r31
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	ef 2e       	mov	r14, r31
     716:	f4 e0       	ldi	r31, 0x04	; 4
     718:	ff 2e       	mov	r15, r31
     71a:	f0 2d       	mov	r31, r0
     71c:	8e 01       	movw	r16, r28
     71e:	4e 81       	ldd	r20, Y+6	; 0x06
     720:	5f 81       	ldd	r21, Y+7	; 0x07
     722:	68 85       	ldd	r22, Y+8	; 0x08
     724:	79 85       	ldd	r23, Y+9	; 0x09
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	9b 81       	ldd	r25, Y+3	; 0x03
     72a:	ac 81       	ldd	r26, Y+4	; 0x04
     72c:	bd 81       	ldd	r27, Y+5	; 0x05
     72e:	48 17       	cp	r20, r24
     730:	59 07       	cpc	r21, r25
     732:	6a 07       	cpc	r22, r26
     734:	7b 07       	cpc	r23, r27
     736:	58 f0       	brcs	.+22     	; 0x74e <TimerISR+0x4e>
     738:	ea 85       	ldd	r30, Y+10	; 0x0a
     73a:	fb 85       	ldd	r31, Y+11	; 0x0b
     73c:	88 81       	ld	r24, Y
     73e:	99 81       	ldd	r25, Y+1	; 0x01
     740:	09 95       	icall
     742:	99 83       	std	Y+1, r25	; 0x01
     744:	88 83       	st	Y, r24
     746:	1e 82       	std	Y+6, r1	; 0x06
     748:	1f 82       	std	Y+7, r1	; 0x07
     74a:	18 86       	std	Y+8, r1	; 0x08
     74c:	19 86       	std	Y+9, r1	; 0x09
     74e:	f8 01       	movw	r30, r16
     750:	86 81       	ldd	r24, Z+6	; 0x06
     752:	97 81       	ldd	r25, Z+7	; 0x07
     754:	a0 85       	ldd	r26, Z+8	; 0x08
     756:	b1 85       	ldd	r27, Z+9	; 0x09
     758:	c2 96       	adiw	r24, 0x32	; 50
     75a:	a1 1d       	adc	r26, r1
     75c:	b1 1d       	adc	r27, r1
     75e:	86 83       	std	Z+6, r24	; 0x06
     760:	97 83       	std	Z+7, r25	; 0x07
     762:	a0 87       	std	Z+8, r26	; 0x08
     764:	b1 87       	std	Z+9, r27	; 0x09
     766:	2c 96       	adiw	r28, 0x0c	; 12
     768:	ce 15       	cp	r28, r14
     76a:	df 05       	cpc	r29, r15
     76c:	b9 f6       	brne	.-82     	; 0x71c <TimerISR+0x1c>
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	08 95       	ret

0000077c <__vector_13>:
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	0b b6       	in	r0, 0x3b	; 59
     788:	0f 92       	push	r0
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
     7a2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <_avr_timer_cntcurr>
     7a6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <_avr_timer_cntcurr+0x1>
     7aa:	a0 91 6d 01 	lds	r26, 0x016D	; 0x80016d <_avr_timer_cntcurr+0x2>
     7ae:	b0 91 6e 01 	lds	r27, 0x016E	; 0x80016e <_avr_timer_cntcurr+0x3>
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	a1 09       	sbc	r26, r1
     7b6:	b1 09       	sbc	r27, r1
     7b8:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_avr_timer_cntcurr>
     7bc:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_avr_timer_cntcurr+0x1>
     7c0:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <_avr_timer_cntcurr+0x2>
     7c4:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <_avr_timer_cntcurr+0x3>
     7c8:	89 2b       	or	r24, r25
     7ca:	8a 2b       	or	r24, r26
     7cc:	8b 2b       	or	r24, r27
     7ce:	89 f4       	brne	.+34     	; 0x7f2 <__vector_13+0x76>
     7d0:	97 df       	rcall	.-210    	; 0x700 <TimerISR>
     7d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     7d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     7da:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     7de:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     7e2:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <_avr_timer_cntcurr>
     7e6:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <_avr_timer_cntcurr+0x1>
     7ea:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <_avr_timer_cntcurr+0x2>
     7ee:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <_avr_timer_cntcurr+0x3>
     7f2:	ff 91       	pop	r31
     7f4:	ef 91       	pop	r30
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0b be       	out	0x3b, r0	; 59
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <TimerSet>:
     818:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
     81c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
     820:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
     824:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
     828:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <_avr_timer_cntcurr>
     82c:	70 93 6c 01 	sts	0x016C, r23	; 0x80016c <_avr_timer_cntcurr+0x1>
     830:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <_avr_timer_cntcurr+0x2>
     834:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <_avr_timer_cntcurr+0x3>
     838:	08 95       	ret

0000083a <setGemColor>:
     83a:	62 30       	cpi	r22, 0x02	; 2
     83c:	71 05       	cpc	r23, r1
     83e:	59 f1       	breq	.+86     	; 0x896 <setGemColor+0x5c>
     840:	3c f4       	brge	.+14     	; 0x850 <setGemColor+0x16>
     842:	61 15       	cp	r22, r1
     844:	71 05       	cpc	r23, r1
     846:	59 f0       	breq	.+22     	; 0x85e <setGemColor+0x24>
     848:	61 30       	cpi	r22, 0x01	; 1
     84a:	71 05       	cpc	r23, r1
     84c:	b1 f0       	breq	.+44     	; 0x87a <setGemColor+0x40>
     84e:	08 95       	ret
     850:	63 30       	cpi	r22, 0x03	; 3
     852:	71 05       	cpc	r23, r1
     854:	71 f1       	breq	.+92     	; 0x8b2 <setGemColor+0x78>
     856:	64 30       	cpi	r22, 0x04	; 4
     858:	71 05       	cpc	r23, r1
     85a:	c9 f1       	breq	.+114    	; 0x8ce <setGemColor+0x94>
     85c:	08 95       	ret
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	fc 01       	movw	r30, r24
     862:	ee 0f       	add	r30, r30
     864:	ff 1f       	adc	r31, r31
     866:	8e 0f       	add	r24, r30
     868:	9f 1f       	adc	r25, r31
     86a:	fc 01       	movw	r30, r24
     86c:	ef 54       	subi	r30, 0x4F	; 79
     86e:	fa 4f       	sbci	r31, 0xFA	; 250
     870:	10 82       	st	Z, r1
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	81 83       	std	Z+1, r24	; 0x01
     876:	12 82       	std	Z+2, r1	; 0x02
     878:	08 95       	ret
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	fc 01       	movw	r30, r24
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	8e 0f       	add	r24, r30
     884:	9f 1f       	adc	r25, r31
     886:	fc 01       	movw	r30, r24
     888:	ef 54       	subi	r30, 0x4F	; 79
     88a:	fa 4f       	sbci	r31, 0xFA	; 250
     88c:	10 82       	st	Z, r1
     88e:	11 82       	std	Z+1, r1	; 0x01
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	82 83       	std	Z+2, r24	; 0x02
     894:	08 95       	ret
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	fc 01       	movw	r30, r24
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	8e 0f       	add	r24, r30
     8a0:	9f 1f       	adc	r25, r31
     8a2:	fc 01       	movw	r30, r24
     8a4:	ef 54       	subi	r30, 0x4F	; 79
     8a6:	fa 4f       	sbci	r31, 0xFA	; 250
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	80 83       	st	Z, r24
     8ac:	11 82       	std	Z+1, r1	; 0x01
     8ae:	12 82       	std	Z+2, r1	; 0x02
     8b0:	08 95       	ret
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	8e 0f       	add	r24, r30
     8bc:	9f 1f       	adc	r25, r31
     8be:	fc 01       	movw	r30, r24
     8c0:	ef 54       	subi	r30, 0x4F	; 79
     8c2:	fa 4f       	sbci	r31, 0xFA	; 250
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 83       	st	Z, r24
     8c8:	81 83       	std	Z+1, r24	; 0x01
     8ca:	12 82       	std	Z+2, r1	; 0x02
     8cc:	08 95       	ret
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	8e 0f       	add	r24, r30
     8d8:	9f 1f       	adc	r25, r31
     8da:	fc 01       	movw	r30, r24
     8dc:	ef 54       	subi	r30, 0x4F	; 79
     8de:	fa 4f       	sbci	r31, 0xFA	; 250
     8e0:	10 82       	st	Z, r1
     8e2:	11 82       	std	Z+1, r1	; 0x01
     8e4:	12 82       	std	Z+2, r1	; 0x02
     8e6:	08 95       	ret

000008e8 <TickFct_Reset>:
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	91 05       	cpc	r25, r1
     8f6:	89 f0       	breq	.+34     	; 0x91a <TickFct_Reset+0x32>
     8f8:	34 f4       	brge	.+12     	; 0x906 <TickFct_Reset+0x1e>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	f1 f1       	breq	.+124    	; 0x97a <TickFct_Reset+0x92>
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	09 f4       	brne	.+2      	; 0x904 <TickFct_Reset+0x1c>
     902:	3e c0       	rjmp	.+124    	; 0x980 <TickFct_Reset+0x98>
     904:	40 c0       	rjmp	.+128    	; 0x986 <TickFct_Reset+0x9e>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	91 05       	cpc	r25, r1
     90a:	21 f0       	breq	.+8      	; 0x914 <TickFct_Reset+0x2c>
     90c:	84 30       	cpi	r24, 0x04	; 4
     90e:	91 05       	cpc	r25, r1
     910:	49 f0       	breq	.+18     	; 0x924 <TickFct_Reset+0x3c>
     912:	39 c0       	rjmp	.+114    	; 0x986 <TickFct_Reset+0x9e>
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	38 c0       	rjmp	.+112    	; 0x98a <TickFct_Reset+0xa2>
     91a:	20 91 5f 05 	lds	r18, 0x055F	; 0x80055f <rsPress>
     91e:	21 11       	cpse	r18, r1
     920:	08 c0       	rjmp	.+16     	; 0x932 <TickFct_Reset+0x4a>
     922:	33 c0       	rjmp	.+102    	; 0x98a <TickFct_Reset+0xa2>
     924:	20 91 5f 05 	lds	r18, 0x055F	; 0x80055f <rsPress>
     928:	21 11       	cpse	r18, r1
     92a:	2f c0       	rjmp	.+94     	; 0x98a <TickFct_Reset+0xa2>
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	2c c0       	rjmp	.+88     	; 0x98a <TickFct_Reset+0xa2>
     932:	ed ea       	ldi	r30, 0xAD	; 173
     934:	f3 e0       	ldi	r31, 0x03	; 3
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	94 e0       	ldi	r25, 0x04	; 4
     93a:	11 82       	std	Z+1, r1	; 0x01
     93c:	10 82       	st	Z, r1
     93e:	3c 96       	adiw	r30, 0x0c	; 12
     940:	e8 17       	cp	r30, r24
     942:	f9 07       	cpc	r31, r25
     944:	d1 f7       	brne	.-12     	; 0x93a <TickFct_Reset+0x52>
     946:	01 eb       	ldi	r16, 0xB1	; 177
     948:	15 e0       	ldi	r17, 0x05	; 5
     94a:	cf e8       	ldi	r28, 0x8F	; 143
     94c:	d4 e0       	ldi	r29, 0x04	; 4
     94e:	f1 2c       	mov	r15, r1
     950:	64 e0       	ldi	r22, 0x04	; 4
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	8f 2d       	mov	r24, r15
     956:	71 df       	rcall	.-286    	; 0x83a <setGemColor>
     958:	f8 01       	movw	r30, r16
     95a:	80 81       	ld	r24, Z
     95c:	88 83       	st	Y, r24
     95e:	81 81       	ldd	r24, Z+1	; 0x01
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	82 81       	ldd	r24, Z+2	; 0x02
     964:	8a 83       	std	Y+2, r24	; 0x02
     966:	f3 94       	inc	r15
     968:	0d 5f       	subi	r16, 0xFD	; 253
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	23 96       	adiw	r28, 0x03	; 3
     96e:	f0 e4       	ldi	r31, 0x40	; 64
     970:	ff 12       	cpse	r15, r31
     972:	ee cf       	rjmp	.-36     	; 0x950 <TickFct_Reset+0x68>
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	08 c0       	rjmp	.+16     	; 0x98a <TickFct_Reset+0xa2>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	05 c0       	rjmp	.+10     	; 0x98a <TickFct_Reset+0xa2>
     980:	82 e0       	ldi	r24, 0x02	; 2
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <TickFct_Reset+0xa2>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	08 95       	ret

00000996 <getGemColor>:
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	fc 01       	movw	r30, r24
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	8e 0f       	add	r24, r30
     9a0:	9f 1f       	adc	r25, r31
     9a2:	fc 01       	movw	r30, r24
     9a4:	ef 54       	subi	r30, 0x4F	; 79
     9a6:	fa 4f       	sbci	r31, 0xFA	; 250
     9a8:	91 81       	ldd	r25, Z+1	; 0x01
     9aa:	80 81       	ld	r24, Z
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	39 f4       	brne	.+14     	; 0x9c0 <getGemColor+0x2a>
     9b2:	91 11       	cpse	r25, r1
     9b4:	13 c0       	rjmp	.+38     	; 0x9dc <getGemColor+0x46>
     9b6:	22 23       	and	r18, r18
     9b8:	e9 f0       	breq	.+58     	; 0x9f4 <getGemColor+0x5e>
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	08 95       	ret
     9c0:	81 11       	cpse	r24, r1
     9c2:	1b c0       	rjmp	.+54     	; 0x9fa <getGemColor+0x64>
     9c4:	92 30       	cpi	r25, 0x02	; 2
     9c6:	29 f4       	brne	.+10     	; 0x9d2 <getGemColor+0x3c>
     9c8:	22 23       	and	r18, r18
     9ca:	d1 f0       	breq	.+52     	; 0xa00 <getGemColor+0x6a>
     9cc:	85 e0       	ldi	r24, 0x05	; 5
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	08 95       	ret
     9d2:	91 11       	cpse	r25, r1
     9d4:	18 c0       	rjmp	.+48     	; 0xa06 <getGemColor+0x70>
     9d6:	22 30       	cpi	r18, 0x02	; 2
     9d8:	41 f4       	brne	.+16     	; 0x9ea <getGemColor+0x54>
     9da:	18 c0       	rjmp	.+48     	; 0xa0c <getGemColor+0x76>
     9dc:	92 30       	cpi	r25, 0x02	; 2
     9de:	c9 f4       	brne	.+50     	; 0xa12 <getGemColor+0x7c>
     9e0:	21 11       	cpse	r18, r1
     9e2:	1a c0       	rjmp	.+52     	; 0xa18 <getGemColor+0x82>
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	08 95       	ret
     9ea:	21 11       	cpse	r18, r1
     9ec:	18 c0       	rjmp	.+48     	; 0xa1e <getGemColor+0x88>
     9ee:	84 e0       	ldi	r24, 0x04	; 4
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	08 95       	ret
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	08 95       	ret
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	08 95       	ret
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	08 95       	ret
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	08 95       	ret
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	08 95       	ret
     a12:	85 e0       	ldi	r24, 0x05	; 5
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	08 95       	ret
     a18:	85 e0       	ldi	r24, 0x05	; 5
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	08 95       	ret
     a1e:	85 e0       	ldi	r24, 0x05	; 5
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret

00000a24 <main>:
     a24:	11 b8       	out	0x01, r1	; 1
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	82 b9       	out	0x02, r24	; 2
     a2a:	84 b9       	out	0x04, r24	; 4
     a2c:	15 b8       	out	0x05, r1	; 5
     a2e:	87 b9       	out	0x07, r24	; 7
     a30:	18 b8       	out	0x08, r1	; 8
     a32:	ed ea       	ldi	r30, 0xAD	; 173
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	11 82       	std	Z+1, r1	; 0x01
     a38:	10 82       	st	Z, r1
     a3a:	84 e6       	ldi	r24, 0x64	; 100
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	82 83       	std	Z+2, r24	; 0x02
     a44:	93 83       	std	Z+3, r25	; 0x03
     a46:	a4 83       	std	Z+4, r26	; 0x04
     a48:	b5 83       	std	Z+5, r27	; 0x05
     a4a:	16 82       	std	Z+6, r1	; 0x06
     a4c:	17 82       	std	Z+7, r1	; 0x07
     a4e:	10 86       	std	Z+8, r1	; 0x08
     a50:	11 86       	std	Z+9, r1	; 0x09
     a52:	89 eb       	ldi	r24, 0xB9	; 185
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	93 87       	std	Z+11, r25	; 0x0b
     a58:	82 87       	std	Z+10, r24	; 0x0a
     a5a:	15 86       	std	Z+13, r1	; 0x0d
     a5c:	14 86       	std	Z+12, r1	; 0x0c
     a5e:	88 ec       	ldi	r24, 0xC8	; 200
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	86 87       	std	Z+14, r24	; 0x0e
     a68:	97 87       	std	Z+15, r25	; 0x0f
     a6a:	a0 8b       	std	Z+16, r26	; 0x10
     a6c:	b1 8b       	std	Z+17, r27	; 0x11
     a6e:	12 8a       	std	Z+18, r1	; 0x12
     a70:	13 8a       	std	Z+19, r1	; 0x13
     a72:	14 8a       	std	Z+20, r1	; 0x14
     a74:	15 8a       	std	Z+21, r1	; 0x15
     a76:	2d e0       	ldi	r18, 0x0D	; 13
     a78:	39 e0       	ldi	r19, 0x09	; 9
     a7a:	37 8b       	std	Z+23, r19	; 0x17
     a7c:	26 8b       	std	Z+22, r18	; 0x16
     a7e:	11 8e       	std	Z+25, r1	; 0x19
     a80:	10 8e       	std	Z+24, r1	; 0x18
     a82:	44 ef       	ldi	r20, 0xF4	; 244
     a84:	51 e0       	ldi	r21, 0x01	; 1
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	42 8f       	std	Z+26, r20	; 0x1a
     a8c:	53 8f       	std	Z+27, r21	; 0x1b
     a8e:	64 8f       	std	Z+28, r22	; 0x1c
     a90:	75 8f       	std	Z+29, r23	; 0x1d
     a92:	16 8e       	std	Z+30, r1	; 0x1e
     a94:	17 8e       	std	Z+31, r1	; 0x1f
     a96:	10 a2       	std	Z+32, r1	; 0x20
     a98:	11 a2       	std	Z+33, r1	; 0x21
     a9a:	2e ee       	ldi	r18, 0xEE	; 238
     a9c:	31 e0       	ldi	r19, 0x01	; 1
     a9e:	33 a3       	std	Z+35, r19	; 0x23
     aa0:	22 a3       	std	Z+34, r18	; 0x22
     aa2:	15 a2       	std	Z+37, r1	; 0x25
     aa4:	14 a2       	std	Z+36, r1	; 0x24
     aa6:	44 ec       	ldi	r20, 0xC4	; 196
     aa8:	59 e0       	ldi	r21, 0x09	; 9
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	46 a3       	std	Z+38, r20	; 0x26
     ab0:	57 a3       	std	Z+39, r21	; 0x27
     ab2:	60 a7       	std	Z+40, r22	; 0x28
     ab4:	71 a7       	std	Z+41, r23	; 0x29
     ab6:	12 a6       	std	Z+42, r1	; 0x2a
     ab8:	13 a6       	std	Z+43, r1	; 0x2b
     aba:	14 a6       	std	Z+44, r1	; 0x2c
     abc:	15 a6       	std	Z+45, r1	; 0x2d
     abe:	26 ea       	ldi	r18, 0xA6	; 166
     ac0:	37 e0       	ldi	r19, 0x07	; 7
     ac2:	37 a7       	std	Z+47, r19	; 0x2f
     ac4:	26 a7       	std	Z+46, r18	; 0x2e
     ac6:	11 aa       	std	Z+49, r1	; 0x31
     ac8:	10 aa       	std	Z+48, r1	; 0x30
     aca:	82 ab       	std	Z+50, r24	; 0x32
     acc:	93 ab       	std	Z+51, r25	; 0x33
     ace:	a4 ab       	std	Z+52, r26	; 0x34
     ad0:	b5 ab       	std	Z+53, r27	; 0x35
     ad2:	16 aa       	std	Z+54, r1	; 0x36
     ad4:	17 aa       	std	Z+55, r1	; 0x37
     ad6:	10 ae       	std	Z+56, r1	; 0x38
     ad8:	11 ae       	std	Z+57, r1	; 0x39
     ada:	2d ea       	ldi	r18, 0xAD	; 173
     adc:	36 e0       	ldi	r19, 0x06	; 6
     ade:	33 af       	std	Z+59, r19	; 0x3b
     ae0:	22 af       	std	Z+58, r18	; 0x3a
     ae2:	15 ae       	std	Z+61, r1	; 0x3d
     ae4:	14 ae       	std	Z+60, r1	; 0x3c
     ae6:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <tasks+0x3e>
     aea:	90 93 ec 03 	sts	0x03EC, r25	; 0x8003ec <tasks+0x3f>
     aee:	a0 93 ed 03 	sts	0x03ED, r26	; 0x8003ed <tasks+0x40>
     af2:	b0 93 ee 03 	sts	0x03EE, r27	; 0x8003ee <tasks+0x41>
     af6:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <tasks+0x42>
     afa:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <tasks+0x43>
     afe:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <tasks+0x44>
     b02:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <tasks+0x45>
     b06:	84 e7       	ldi	r24, 0x74	; 116
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <tasks+0x47>
     b0e:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <tasks+0x46>
     b12:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <tasks+0x49>
     b16:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <tasks+0x48>
     b1a:	88 ee       	ldi	r24, 0xE8	; 232
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <tasks+0x4a>
     b26:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <tasks+0x4b>
     b2a:	a0 93 f9 03 	sts	0x03F9, r26	; 0x8003f9 <tasks+0x4c>
     b2e:	b0 93 fa 03 	sts	0x03FA, r27	; 0x8003fa <tasks+0x4d>
     b32:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <tasks+0x4e>
     b36:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <tasks+0x4f>
     b3a:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <tasks+0x50>
     b3e:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <tasks+0x51>
     b42:	83 e8       	ldi	r24, 0x83	; 131
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <tasks+0x53>
     b4a:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <tasks+0x52>
     b4e:	bc db       	rcall	.-2184   	; 0x2c8 <ADC_Init>
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	5f de       	rcall	.-834    	; 0x818 <TimerSet>
     b5a:	ae dd       	rcall	.-1188   	; 0x6b8 <TimerOn>
     b5c:	ef d3       	rcall	.+2014   	; 0x133c <nokia_lcd_init>
     b5e:	54 d5       	rcall	.+2728   	; 0x1608 <initMatrix>
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	71 d5       	rcall	.+2786   	; 0x164a <setAllLEDs>
     b68:	ff cf       	rjmp	.-2      	; 0xb68 <main+0x144>

00000b6a <stickMoved>:
     b6a:	9a 95       	dec	r25
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	92 40       	sbci	r25, 0x02	; 2
     b70:	38 f4       	brcc	.+14     	; 0xb80 <stickMoved+0x16>
     b72:	7a 95       	dec	r23
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	61 30       	cpi	r22, 0x01	; 1
     b78:	72 40       	sbci	r23, 0x02	; 2
     b7a:	18 f4       	brcc	.+6      	; 0xb82 <stickMoved+0x18>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	08 95       	ret
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	08 95       	ret

00000b84 <getDirection>:
     b84:	61 30       	cpi	r22, 0x01	; 1
     b86:	23 e0       	ldi	r18, 0x03	; 3
     b88:	72 07       	cpc	r23, r18
     b8a:	78 f0       	brcs	.+30     	; 0xbaa <getDirection+0x26>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	43 e0       	ldi	r20, 0x03	; 3
     b90:	94 07       	cpc	r25, r20
     b92:	c0 f5       	brcc	.+112    	; 0xc04 <getDirection+0x80>
     b94:	9c 01       	movw	r18, r24
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 40       	sbci	r19, 0x01	; 1
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 40       	sbci	r19, 0x01	; 1
     b9e:	a8 f1       	brcs	.+106    	; 0xc0a <getDirection+0x86>
     ba0:	8f 3f       	cpi	r24, 0xFF	; 255
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f0       	breq	.+2      	; 0xba8 <getDirection+0x24>
     ba6:	e8 f4       	brcc	.+58     	; 0xbe2 <getDirection+0x5e>
     ba8:	33 c0       	rjmp	.+102    	; 0xc10 <getDirection+0x8c>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	23 e0       	ldi	r18, 0x03	; 3
     bae:	92 07       	cpc	r25, r18
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <getDirection+0x30>
     bb2:	43 c0       	rjmp	.+134    	; 0xc3a <getDirection+0xb6>
     bb4:	61 15       	cp	r22, r1
     bb6:	43 e0       	ldi	r20, 0x03	; 3
     bb8:	74 07       	cpc	r23, r20
     bba:	60 f4       	brcc	.+24     	; 0xbd4 <getDirection+0x50>
     bbc:	61 30       	cpi	r22, 0x01	; 1
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	78 07       	cpc	r23, r24
     bc2:	48 f5       	brcc	.+82     	; 0xc16 <getDirection+0x92>
     bc4:	07 c0       	rjmp	.+14     	; 0xbd4 <getDirection+0x50>
     bc6:	9b 01       	movw	r18, r22
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	31 40       	sbci	r19, 0x01	; 1
     bcc:	2f 3f       	cpi	r18, 0xFF	; 255
     bce:	31 40       	sbci	r19, 0x01	; 1
     bd0:	28 f1       	brcs	.+74     	; 0xc1c <getDirection+0x98>
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <getDirection+0x5e>
     bd4:	6f 3f       	cpi	r22, 0xFF	; 255
     bd6:	71 05       	cpc	r23, r1
     bd8:	21 f1       	breq	.+72     	; 0xc22 <getDirection+0x9e>
     bda:	18 f1       	brcs	.+70     	; 0xc22 <getDirection+0x9e>
     bdc:	88 e0       	ldi	r24, 0x08	; 8
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 95       	ret
     be2:	6f 3f       	cpi	r22, 0xFF	; 255
     be4:	71 05       	cpc	r23, r1
     be6:	09 f0       	breq	.+2      	; 0xbea <getDirection+0x66>
     be8:	f8 f4       	brcc	.+62     	; 0xc28 <getDirection+0xa4>
     bea:	9c 01       	movw	r18, r24
     bec:	21 50       	subi	r18, 0x01	; 1
     bee:	31 40       	sbci	r19, 0x01	; 1
     bf0:	2f 3f       	cpi	r18, 0xFF	; 255
     bf2:	31 40       	sbci	r19, 0x01	; 1
     bf4:	e0 f0       	brcs	.+56     	; 0xc2e <getDirection+0xaa>
     bf6:	8f 3f       	cpi	r24, 0xFF	; 255
     bf8:	91 05       	cpc	r25, r1
     bfa:	e1 f0       	breq	.+56     	; 0xc34 <getDirection+0xb0>
     bfc:	d8 f0       	brcs	.+54     	; 0xc34 <getDirection+0xb0>
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	08 95       	ret
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	08 95       	ret
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	08 95       	ret
     c16:	86 e0       	ldi	r24, 0x06	; 6
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	08 95       	ret
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	08 95       	ret
     c22:	85 e0       	ldi	r24, 0x05	; 5
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	08 95       	ret
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	08 95       	ret
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	08 95       	ret
     c3a:	8f 3f       	cpi	r24, 0xFF	; 255
     c3c:	91 05       	cpc	r25, r1
     c3e:	19 f2       	breq	.-122    	; 0xbc6 <getDirection+0x42>
     c40:	10 f2       	brcs	.-124    	; 0xbc6 <getDirection+0x42>
     c42:	cf cf       	rjmp	.-98     	; 0xbe2 <getDirection+0x5e>

00000c44 <moveCursor>:
     c44:	88 30       	cpi	r24, 0x08	; 8
     c46:	91 05       	cpc	r25, r1
     c48:	08 f0       	brcs	.+2      	; 0xc4c <moveCursor+0x8>
     c4a:	63 c0       	rjmp	.+198    	; 0xd12 <moveCursor+0xce>
     c4c:	fc 01       	movw	r30, r24
     c4e:	ea 5b       	subi	r30, 0xBA	; 186
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	92 c5       	rjmp	.+2852   	; 0x1778 <__tablejump2__>
     c54:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <cursor+0x1>
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <moveCursor+0x1a>
     c5c:	5a c0       	rjmp	.+180    	; 0xd12 <moveCursor+0xce>
     c5e:	81 50       	subi	r24, 0x01	; 1
     c60:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <cursor+0x1>
     c64:	08 95       	ret
     c66:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <cursor+0x1>
     c6a:	88 23       	and	r24, r24
     c6c:	09 f4       	brne	.+2      	; 0xc70 <moveCursor+0x2c>
     c6e:	51 c0       	rjmp	.+162    	; 0xd12 <moveCursor+0xce>
     c70:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <cursor>
     c74:	97 30       	cpi	r25, 0x07	; 7
     c76:	08 f0       	brcs	.+2      	; 0xc7a <moveCursor+0x36>
     c78:	4c c0       	rjmp	.+152    	; 0xd12 <moveCursor+0xce>
     c7a:	ec e5       	ldi	r30, 0x5C	; 92
     c7c:	f5 e0       	ldi	r31, 0x05	; 5
     c7e:	9f 5f       	subi	r25, 0xFF	; 255
     c80:	90 83       	st	Z, r25
     c82:	81 50       	subi	r24, 0x01	; 1
     c84:	81 83       	std	Z+1, r24	; 0x01
     c86:	08 95       	ret
     c88:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <cursor>
     c8c:	87 30       	cpi	r24, 0x07	; 7
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <moveCursor+0x4e>
     c90:	40 c0       	rjmp	.+128    	; 0xd12 <moveCursor+0xce>
     c92:	8f 5f       	subi	r24, 0xFF	; 255
     c94:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <cursor>
     c98:	08 95       	ret
     c9a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <cursor>
     c9e:	87 30       	cpi	r24, 0x07	; 7
     ca0:	c0 f5       	brcc	.+112    	; 0xd12 <moveCursor+0xce>
     ca2:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <cursor+0x1>
     ca6:	97 30       	cpi	r25, 0x07	; 7
     ca8:	a0 f5       	brcc	.+104    	; 0xd12 <moveCursor+0xce>
     caa:	ec e5       	ldi	r30, 0x5C	; 92
     cac:	f5 e0       	ldi	r31, 0x05	; 5
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	80 83       	st	Z, r24
     cb2:	9f 5f       	subi	r25, 0xFF	; 255
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	08 95       	ret
     cb8:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <cursor+0x1>
     cbc:	87 30       	cpi	r24, 0x07	; 7
     cbe:	48 f5       	brcc	.+82     	; 0xd12 <moveCursor+0xce>
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <cursor+0x1>
     cc6:	08 95       	ret
     cc8:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <cursor+0x1>
     ccc:	87 30       	cpi	r24, 0x07	; 7
     cce:	08 f5       	brcc	.+66     	; 0xd12 <moveCursor+0xce>
     cd0:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <cursor>
     cd4:	99 23       	and	r25, r25
     cd6:	e9 f0       	breq	.+58     	; 0xd12 <moveCursor+0xce>
     cd8:	ec e5       	ldi	r30, 0x5C	; 92
     cda:	f5 e0       	ldi	r31, 0x05	; 5
     cdc:	8f 5f       	subi	r24, 0xFF	; 255
     cde:	81 83       	std	Z+1, r24	; 0x01
     ce0:	91 50       	subi	r25, 0x01	; 1
     ce2:	90 83       	st	Z, r25
     ce4:	08 95       	ret
     ce6:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <cursor>
     cea:	88 23       	and	r24, r24
     cec:	91 f0       	breq	.+36     	; 0xd12 <moveCursor+0xce>
     cee:	81 50       	subi	r24, 0x01	; 1
     cf0:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <cursor>
     cf4:	08 95       	ret
     cf6:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <cursor>
     cfa:	88 23       	and	r24, r24
     cfc:	51 f0       	breq	.+20     	; 0xd12 <moveCursor+0xce>
     cfe:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <cursor+0x1>
     d02:	99 23       	and	r25, r25
     d04:	31 f0       	breq	.+12     	; 0xd12 <moveCursor+0xce>
     d06:	ec e5       	ldi	r30, 0x5C	; 92
     d08:	f5 e0       	ldi	r31, 0x05	; 5
     d0a:	81 50       	subi	r24, 0x01	; 1
     d0c:	80 83       	st	Z, r24
     d0e:	91 50       	subi	r25, 0x01	; 1
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	08 95       	ret

00000d14 <initLEDs>:
     d14:	cf 93       	push	r28
     d16:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <seed>
     d1a:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <seed+0x1>
     d1e:	7f d5       	rcall	.+2814   	; 0x181e <srand>
     d20:	c0 e0       	ldi	r28, 0x00	; 0
     d22:	7a d5       	rcall	.+2804   	; 0x1818 <rand>
     d24:	bc 01       	movw	r22, r24
     d26:	63 70       	andi	r22, 0x03	; 3
     d28:	70 78       	andi	r23, 0x80	; 128
     d2a:	77 23       	and	r23, r23
     d2c:	34 f4       	brge	.+12     	; 0xd3a <initLEDs+0x26>
     d2e:	61 50       	subi	r22, 0x01	; 1
     d30:	71 09       	sbc	r23, r1
     d32:	6c 6f       	ori	r22, 0xFC	; 252
     d34:	7f 6f       	ori	r23, 0xFF	; 255
     d36:	6f 5f       	subi	r22, 0xFF	; 255
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8c 2f       	mov	r24, r28
     d3c:	7e dd       	rcall	.-1284   	; 0x83a <setGemColor>
     d3e:	cf 5f       	subi	r28, 0xFF	; 255
     d40:	c0 34       	cpi	r28, 0x40	; 64
     d42:	79 f7       	brne	.-34     	; 0xd22 <initLEDs+0xe>
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <getCursorIndex>:
     d48:	ec e5       	ldi	r30, 0x5C	; 92
     d4a:	f5 e0       	ldi	r31, 0x05	; 5
     d4c:	81 81       	ldd	r24, Z+1	; 0x01
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	88 0f       	add	r24, r24
     d54:	90 81       	ld	r25, Z
     d56:	89 0f       	add	r24, r25
     d58:	08 95       	ret

00000d5a <TickFct_LED>:
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	a1 f1       	breq	.+104    	; 0xdcc <TickFct_LED+0x72>
     d64:	1c f0       	brlt	.+6      	; 0xd6c <TickFct_LED+0x12>
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	91 05       	cpc	r25, r1
     d6a:	1c f0       	brlt	.+6      	; 0xd72 <TickFct_LED+0x18>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	91 05       	cpc	r25, r1
     d70:	79 f5       	brne	.+94     	; 0xdd0 <TickFct_LED+0x76>
     d72:	0f e8       	ldi	r16, 0x8F	; 143
     d74:	14 e0       	ldi	r17, 0x04	; 4
     d76:	c0 e0       	ldi	r28, 0x00	; 0
     d78:	e7 df       	rcall	.-50     	; 0xd48 <getCursorIndex>
     d7a:	8c 17       	cp	r24, r28
     d7c:	31 f0       	breq	.+12     	; 0xd8a <TickFct_LED+0x30>
     d7e:	f8 01       	movw	r30, r16
     d80:	21 81       	ldd	r18, Z+1	; 0x01
     d82:	42 81       	ldd	r20, Z+2	; 0x02
     d84:	60 81       	ld	r22, Z
     d86:	8c 2f       	mov	r24, r28
     d88:	52 d4       	rcall	.+2212   	; 0x162e <setLED>
     d8a:	cf 5f       	subi	r28, 0xFF	; 255
     d8c:	0d 5f       	subi	r16, 0xFD	; 253
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	c0 34       	cpi	r28, 0x40	; 64
     d92:	91 f7       	brne	.-28     	; 0xd78 <TickFct_LED+0x1e>
     d94:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <blinkCursor>
     d98:	88 23       	and	r24, r24
     d9a:	31 f0       	breq	.+12     	; 0xda8 <TickFct_LED+0x4e>
     d9c:	d5 df       	rcall	.-86     	; 0xd48 <getCursorIndex>
     d9e:	25 e0       	ldi	r18, 0x05	; 5
     da0:	45 e0       	ldi	r20, 0x05	; 5
     da2:	65 e0       	ldi	r22, 0x05	; 5
     da4:	44 d4       	rcall	.+2184   	; 0x162e <setLED>
     da6:	0e c0       	rjmp	.+28     	; 0xdc4 <TickFct_LED+0x6a>
     da8:	cf df       	rcall	.-98     	; 0xd48 <getCursorIndex>
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	e2 0f       	add	r30, r18
     db6:	f3 1f       	adc	r31, r19
     db8:	e1 57       	subi	r30, 0x71	; 113
     dba:	fb 4f       	sbci	r31, 0xFB	; 251
     dbc:	21 81       	ldd	r18, Z+1	; 0x01
     dbe:	42 81       	ldd	r20, Z+2	; 0x02
     dc0:	60 81       	ld	r22, Z
     dc2:	35 d4       	rcall	.+2154   	; 0x162e <setLED>
     dc4:	7c d4       	rcall	.+2296   	; 0x16be <cycle>
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <TickFct_LED+0x76>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <searchMatching>:

unsigned char Matching[64];
int matchColor;

void searchMatching(unsigned char x, unsigned char y)
{	
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	d8 2f       	mov	r29, r24
     dee:	c6 2e       	mov	r12, r22
	for(unsigned char i = 0; i < 7 - x; i++)
     df0:	07 e0       	ldi	r16, 0x07	; 7
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	08 1b       	sub	r16, r24
     df6:	11 09       	sbc	r17, r1
     df8:	10 16       	cp	r1, r16
     dfa:	11 06       	cpc	r1, r17
     dfc:	a4 f4       	brge	.+40     	; 0xe26 <searchMatching+0x4e>
     dfe:	b6 2e       	mov	r11, r22
     e00:	bb 0c       	add	r11, r11
     e02:	bb 0c       	add	r11, r11
     e04:	bb 0c       	add	r11, r11
     e06:	b8 0e       	add	r11, r24
     e08:	b3 94       	inc	r11
	{
		if(getGemColor(getIndex(x + i + 1, y)) != matchColor)
     e0a:	e0 90 46 04 	lds	r14, 0x0446	; 0x800446 <matchColor>
     e0e:	f0 90 47 04 	lds	r15, 0x0447	; 0x800447 <matchColor+0x1>
     e12:	d1 2c       	mov	r13, r1
		{
			break;
		}
		else
		{
			Matching[getIndex(x + i + 1, y)] = 1;
     e14:	aa 24       	eor	r10, r10
     e16:	a3 94       	inc	r10
     e18:	cb 2d       	mov	r28, r11
     e1a:	cd 0d       	add	r28, r13

void searchMatching(unsigned char x, unsigned char y)
{	
	for(unsigned char i = 0; i < 7 - x; i++)
	{
		if(getGemColor(getIndex(x + i + 1, y)) != matchColor)
     e1c:	8c 2f       	mov	r24, r28
     e1e:	bb dd       	rcall	.-1162   	; 0x996 <getGemColor>
     e20:	8e 15       	cp	r24, r14
     e22:	9f 05       	cpc	r25, r15
     e24:	19 f0       	breq	.+6      	; 0xe2c <searchMatching+0x54>
		{
			Matching[getIndex(x + i + 1, y)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < x; i++)
     e26:	d1 11       	cpse	r29, r1
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <searchMatching+0x6c>
     e2a:	1e c0       	rjmp	.+60     	; 0xe68 <searchMatching+0x90>
		{
			break;
		}
		else
		{
			Matching[getIndex(x + i + 1, y)] = 1;
     e2c:	ec 2f       	mov	r30, r28
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	e8 59       	subi	r30, 0x98	; 152
     e32:	fa 4f       	sbci	r31, 0xFA	; 250
     e34:	a0 82       	st	Z, r10
unsigned char Matching[64];
int matchColor;

void searchMatching(unsigned char x, unsigned char y)
{	
	for(unsigned char i = 0; i < 7 - x; i++)
     e36:	d3 94       	inc	r13
     e38:	8d 2d       	mov	r24, r13
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	80 17       	cp	r24, r16
     e3e:	91 07       	cpc	r25, r17
     e40:	5c f3       	brlt	.-42     	; 0xe18 <searchMatching+0x40>
     e42:	f1 cf       	rjmp	.-30     	; 0xe26 <searchMatching+0x4e>

// Same as getCursorIndex() but with input

unsigned char getIndex(unsigned char x, unsigned char y)
{
	return x + (y * 8);
     e44:	1c 2d       	mov	r17, r12
     e46:	11 0f       	add	r17, r17
     e48:	11 0f       	add	r17, r17
     e4a:	11 0f       	add	r17, r17
     e4c:	cd 2f       	mov	r28, r29
     e4e:	c1 0f       	add	r28, r17
     e50:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	
	for(unsigned char i = 0; i < x; i++)
	{
		if(getGemColor(getIndex(x - i - 1, y)) != matchColor)
     e52:	e0 90 46 04 	lds	r14, 0x0446	; 0x800446 <matchColor>
     e56:	f0 90 47 04 	lds	r15, 0x0447	; 0x800447 <matchColor+0x1>
     e5a:	11 50       	subi	r17, 0x01	; 1
		{
			break;
		}
		else
		{
			Matching[getIndex(x - i +- 1, y)] = 1;
     e5c:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	
	for(unsigned char i = 0; i < x; i++)
	{
		if(getGemColor(getIndex(x - i - 1, y)) != matchColor)
     e5e:	8c 2f       	mov	r24, r28
     e60:	9a dd       	rcall	.-1228   	; 0x996 <getGemColor>
     e62:	8e 15       	cp	r24, r14
     e64:	9f 05       	cpc	r25, r15
     e66:	41 f0       	breq	.+16     	; 0xe78 <searchMatching+0xa0>
		{
			Matching[getIndex(x - i +- 1, y)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < 7 - y; i++)
     e68:	07 e0       	ldi	r16, 0x07	; 7
     e6a:	10 e0       	ldi	r17, 0x00	; 0
     e6c:	0c 19       	sub	r16, r12
     e6e:	11 09       	sbc	r17, r1
     e70:	10 16       	cp	r1, r16
     e72:	11 06       	cpc	r1, r17
     e74:	54 f0       	brlt	.+20     	; 0xe8a <searchMatching+0xb2>
     e76:	1b c0       	rjmp	.+54     	; 0xeae <searchMatching+0xd6>
		{
			break;
		}
		else
		{
			Matching[getIndex(x - i +- 1, y)] = 1;
     e78:	ec 2f       	mov	r30, r28
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	e8 59       	subi	r30, 0x98	; 152
     e7e:	fa 4f       	sbci	r31, 0xFA	; 250
     e80:	00 83       	st	Z, r16
     e82:	c1 50       	subi	r28, 0x01	; 1
		{
			Matching[getIndex(x + i + 1, y)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < x; i++)
     e84:	1c 13       	cpse	r17, r28
     e86:	eb cf       	rjmp	.-42     	; 0xe5e <searchMatching+0x86>
     e88:	ef cf       	rjmp	.-34     	; 0xe68 <searchMatching+0x90>
		}
	}
	
	for(unsigned char i = 0; i < 7 - y; i++)
	{
		if(getGemColor(getIndex(x, y + i + 1)) != matchColor)
     e8a:	e0 90 46 04 	lds	r14, 0x0446	; 0x800446 <matchColor>
     e8e:	f0 90 47 04 	lds	r15, 0x0447	; 0x800447 <matchColor+0x1>
     e92:	c1 e0       	ldi	r28, 0x01	; 1
     e94:	cc 0d       	add	r28, r12
     e96:	cc 0f       	add	r28, r28
     e98:	cc 0f       	add	r28, r28
     e9a:	cc 0f       	add	r28, r28
     e9c:	cd 0f       	add	r28, r29
     e9e:	d1 2c       	mov	r13, r1
		{
			break;
		}
		else
		{
			Matching[getIndex(x, y + i + 1)] = 1;
     ea0:	bb 24       	eor	r11, r11
		}
	}
	
	for(unsigned char i = 0; i < 7 - y; i++)
	{
		if(getGemColor(getIndex(x, y + i + 1)) != matchColor)
     ea2:	b3 94       	inc	r11
     ea4:	8c 2f       	mov	r24, r28
     ea6:	77 dd       	rcall	.-1298   	; 0x996 <getGemColor>
     ea8:	8e 15       	cp	r24, r14
     eaa:	9f 05       	cpc	r25, r15
     eac:	19 f0       	breq	.+6      	; 0xeb4 <searchMatching+0xdc>
		{
			Matching[getIndex(x, y + i + 1)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < y; i++)
     eae:	c1 10       	cpse	r12, r1
     eb0:	0e c0       	rjmp	.+28     	; 0xece <searchMatching+0xf6>
     eb2:	28 c0       	rjmp	.+80     	; 0xf04 <searchMatching+0x12c>
		{
			break;
		}
		else
		{
			Matching[getIndex(x, y + i + 1)] = 1;
     eb4:	ec 2f       	mov	r30, r28
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	e8 59       	subi	r30, 0x98	; 152
     eba:	fa 4f       	sbci	r31, 0xFA	; 250
     ebc:	b0 82       	st	Z, r11
		{
			Matching[getIndex(x - i +- 1, y)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < 7 - y; i++)
     ebe:	d3 94       	inc	r13
     ec0:	c8 5f       	subi	r28, 0xF8	; 248
     ec2:	8d 2d       	mov	r24, r13
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	80 17       	cp	r24, r16
     ec8:	91 07       	cpc	r25, r17
     eca:	64 f3       	brlt	.-40     	; 0xea4 <searchMatching+0xcc>
     ecc:	f0 cf       	rjmp	.-32     	; 0xeae <searchMatching+0xd6>
		}
	}
	
	for(unsigned char i = 0; i < y; i++)
	{
		if(getGemColor(getIndex(x, y - i - 1)) != matchColor)
     ece:	00 91 46 04 	lds	r16, 0x0446	; 0x800446 <matchColor>
     ed2:	10 91 47 04 	lds	r17, 0x0447	; 0x800447 <matchColor+0x1>
     ed6:	cf e1       	ldi	r28, 0x1F	; 31
     ed8:	cc 0d       	add	r28, r12
     eda:	cc 0f       	add	r28, r28
     edc:	cc 0f       	add	r28, r28
     ede:	cc 0f       	add	r28, r28
     ee0:	cd 0f       	add	r28, r29
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
		{
			break;
		}
		else
		{
			Matching[getIndex(x, y - i - 1)] = 1;
     ee4:	ff 24       	eor	r15, r15
		}
	}
	
	for(unsigned char i = 0; i < y; i++)
	{
		if(getGemColor(getIndex(x, y - i - 1)) != matchColor)
     ee6:	f3 94       	inc	r15
     ee8:	8c 2f       	mov	r24, r28
     eea:	55 dd       	rcall	.-1366   	; 0x996 <getGemColor>
     eec:	80 17       	cp	r24, r16
     eee:	91 07       	cpc	r25, r17
     ef0:	49 f4       	brne	.+18     	; 0xf04 <searchMatching+0x12c>
		{
			break;
		}
		else
		{
			Matching[getIndex(x, y - i - 1)] = 1;
     ef2:	ec 2f       	mov	r30, r28
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	e8 59       	subi	r30, 0x98	; 152
     ef8:	fa 4f       	sbci	r31, 0xFA	; 250
     efa:	f0 82       	st	Z, r15
		{
			Matching[getIndex(x, y + i + 1)] = 1;
		}
	}
	
	for(unsigned char i = 0; i < y; i++)
     efc:	df 5f       	subi	r29, 0xFF	; 255
     efe:	c8 50       	subi	r28, 0x08	; 8
     f00:	cd 12       	cpse	r12, r29
     f02:	f2 cf       	rjmp	.-28     	; 0xee8 <searchMatching+0x110>
		else
		{
			Matching[getIndex(x, y - i - 1)] = 1;
		}
	}
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ff 90       	pop	r15
     f0e:	ef 90       	pop	r14
     f10:	df 90       	pop	r13
     f12:	cf 90       	pop	r12
     f14:	bf 90       	pop	r11
     f16:	af 90       	pop	r10
     f18:	08 95       	ret

00000f1a <refillGems>:
	refillGemsNoRepeat(matchColor);
	//refillGems();
}

void refillGems()
{
     f1a:	cf 93       	push	r28
	for(unsigned char i = 0; i < 64; i++)
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(getGemColor(i) == GC_Empty)
     f1e:	8c 2f       	mov	r24, r28
     f20:	3a dd       	rcall	.-1420   	; 0x996 <getGemColor>
     f22:	04 97       	sbiw	r24, 0x04	; 4
     f24:	71 f4       	brne	.+28     	; 0xf42 <refillGems+0x28>
		{
			setGemColor(i, rand() % 4);
     f26:	78 d4       	rcall	.+2288   	; 0x1818 <rand>
     f28:	bc 01       	movw	r22, r24
     f2a:	63 70       	andi	r22, 0x03	; 3
     f2c:	70 78       	andi	r23, 0x80	; 128
     f2e:	77 23       	and	r23, r23
     f30:	34 f4       	brge	.+12     	; 0xf3e <refillGems+0x24>
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	71 09       	sbc	r23, r1
     f36:	6c 6f       	ori	r22, 0xFC	; 252
     f38:	7f 6f       	ori	r23, 0xFF	; 255
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8c 2f       	mov	r24, r28
     f40:	7c dc       	rcall	.-1800   	; 0x83a <setGemColor>
     f42:	cf 5f       	subi	r28, 0xFF	; 255
	//refillGems();
}

void refillGems()
{
	for(unsigned char i = 0; i < 64; i++)
     f44:	c0 34       	cpi	r28, 0x40	; 64
     f46:	59 f7       	brne	.-42     	; 0xf1e <refillGems+0x4>
     f48:	cf 91       	pop	r28
		if(getGemColor(i) == GC_Empty)
		{
			setGemColor(i, rand() % 4);
		}
	}	
}
     f4a:	08 95       	ret

00000f4c <TickFct_Animate>:
     f4c:	82 30       	cpi	r24, 0x02	; 2
unsigned char minHeight;

int TickFct_Animate(int state)
{
	static unsigned int i;
	switch(state)
     f4e:	91 05       	cpc	r25, r1
     f50:	b9 f0       	breq	.+46     	; 0xf80 <TickFct_Animate+0x34>
     f52:	2c f4       	brge	.+10     	; 0xf5e <TickFct_Animate+0x12>
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	21 f1       	breq	.+72     	; 0xfa0 <TickFct_Animate+0x54>
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	41 f0       	breq	.+16     	; 0xf6c <TickFct_Animate+0x20>
     f5c:	79 c0       	rjmp	.+242    	; 0x1050 <TickFct_Animate+0x104>
     f5e:	83 30       	cpi	r24, 0x03	; 3
     f60:	91 05       	cpc	r25, r1
     f62:	c9 f0       	breq	.+50     	; 0xf96 <TickFct_Animate+0x4a>
     f64:	04 97       	sbiw	r24, 0x04	; 4
     f66:	09 f4       	brne	.+2      	; 0xf6a <TickFct_Animate+0x1e>
     f68:	76 c0       	rjmp	.+236    	; 0x1056 <TickFct_Animate+0x10a>
     f6a:	72 c0       	rjmp	.+228    	; 0x1050 <TickFct_Animate+0x104>
		case AN_Start:
			state = AN_Init;
			break;
			
		case AN_Init:
			i = 0;
     f6c:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <i.2190+0x1>
     f70:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <i.2190>
			if(startGame)
     f74:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <startGame>
     f78:	88 23       	and	r24, r24
     f7a:	91 f0       	breq	.+36     	; 0xfa0 <TickFct_Animate+0x54>
			{
				initLEDs();
     f7c:	cb de       	rcall	.-618    	; 0xd14 <initLEDs>
     f7e:	72 c0       	rjmp	.+228    	; 0x1064 <TickFct_Animate+0x118>
				state = AN_Init;
			}
			break;
			
		case AN_FallingIntro:
			if(i < 8)
     f80:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <i.2190>
     f84:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <i.2190+0x1>
     f88:	08 97       	sbiw	r24, 0x08	; 8
     f8a:	08 f4       	brcc	.+2      	; 0xf8e <TickFct_Animate+0x42>
     f8c:	6b c0       	rjmp	.+214    	; 0x1064 <TickFct_Animate+0x118>
			{
				state = AN_FallingIntro;
			}
			else
			{
				fallFinished = 1;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <fallFinished>
     f94:	60 c0       	rjmp	.+192    	; 0x1056 <TickFct_Animate+0x10a>
			}

			break;
			
		case AN_Idle:
			if(isDestroyed)
     f96:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <isDestroyed>
     f9a:	81 11       	cpse	r24, r1
     f9c:	40 c0       	rjmp	.+128    	; 0x101e <TickFct_Animate+0xd2>
     f9e:	5b c0       	rjmp	.+182    	; 0x1056 <TickFct_Animate+0x10a>
	{
		case AN_Start:
			break;
			
		case AN_Init:
			blinkCursor = 0;
     fa0:	10 92 60 05 	sts	0x0560, r1	; 0x800560 <blinkCursor>
			fallFinished = 0;
     fa4:	10 92 8d 04 	sts	0x048D, r1	; 0x80048d <fallFinished>
			break;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	08 95       	ret
			
		case AN_FallingIntro:
			for(unsigned char j = 0; j < 64; j++)
			{
				if(j >= (8 * (7 - i)))
     fae:	82 17       	cp	r24, r18
     fb0:	93 07       	cpc	r25, r19
     fb2:	58 f0       	brcs	.+22     	; 0xfca <TickFct_Animate+0x7e>
				{
					LEDs[j].green = Gems[((i + 1) * 8) - 1 - (63 - j)].green;
     fb4:	4c 91       	ld	r20, X
     fb6:	40 83       	st	Z, r20
					LEDs[j].red = Gems[((i + 1) * 8) - 1 - (63 - j)].red;
     fb8:	11 96       	adiw	r26, 0x01	; 1
     fba:	4c 91       	ld	r20, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	41 83       	std	Z+1, r20	; 0x01
					LEDs[j].blue = Gems[((i + 1) * 8) - 1 - (63 - j)].blue;
     fc0:	12 96       	adiw	r26, 0x02	; 2
     fc2:	4c 91       	ld	r20, X
     fc4:	12 97       	sbiw	r26, 0x02	; 2
     fc6:	42 83       	std	Z+2, r20	; 0x02
     fc8:	03 c0       	rjmp	.+6      	; 0xfd0 <TickFct_Animate+0x84>
				}
				else
				{
					LEDs[j].green = 0;
     fca:	10 82       	st	Z, r1
					LEDs[j].red = 0;
     fcc:	11 82       	std	Z+1, r1	; 0x01
					LEDs[j].blue = 0;
     fce:	12 82       	std	Z+2, r1	; 0x02
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	13 96       	adiw	r26, 0x03	; 3
     fd4:	33 96       	adiw	r30, 0x03	; 3
			blinkCursor = 0;
			fallFinished = 0;
			break;
			
		case AN_FallingIntro:
			for(unsigned char j = 0; j < 64; j++)
     fd6:	80 34       	cpi	r24, 0x40	; 64
     fd8:	91 05       	cpc	r25, r1
     fda:	49 f7       	brne	.-46     	; 0xfae <TickFct_Animate+0x62>
					LEDs[j].green = 0;
					LEDs[j].red = 0;
					LEDs[j].blue = 0;
				}
			}
			i++;
     fdc:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <i.2190>
     fe0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <i.2190+0x1>
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <i.2190+0x1>
     fea:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <i.2190>
			break;
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	08 95       	ret
			
		case AN_Idle:
			//blinkCursor = blinkCursor ? 0 : 1;
			for(unsigned char j = 0; j < 64; j++)
			{
				LEDs[j].green = Gems[j].green;
     ff4:	80 81       	ld	r24, Z
     ff6:	8c 93       	st	X, r24
				LEDs[j].red = Gems[j].red;
     ff8:	81 81       	ldd	r24, Z+1	; 0x01
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	8c 93       	st	X, r24
     ffe:	11 97       	sbiw	r26, 0x01	; 1
				LEDs[j].blue = Gems[j].blue;
    1000:	82 81       	ldd	r24, Z+2	; 0x02
    1002:	12 96       	adiw	r26, 0x02	; 2
    1004:	8c 93       	st	X, r24
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	33 96       	adiw	r30, 0x03	; 3
    100a:	13 96       	adiw	r26, 0x03	; 3
			i++;
			break;
			
		case AN_Idle:
			//blinkCursor = blinkCursor ? 0 : 1;
			for(unsigned char j = 0; j < 64; j++)
    100c:	e2 17       	cp	r30, r18
    100e:	f3 07       	cpc	r31, r19
    1010:	89 f7       	brne	.-30     	; 0xff4 <TickFct_Animate+0xa8>
			{
				LEDs[j].green = Gems[j].green;
				LEDs[j].red = Gems[j].red;
				LEDs[j].blue = Gems[j].blue;
			}
			blinkCursor = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <blinkCursor>
			break;
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	90 e0       	ldi	r25, 0x00	; 0
			
		case AN_Refill:
			refillGems();
    101c:	08 95       	ret
    101e:	7d df       	rcall	.-262    	; 0xf1a <refillGems>
    1020:	e1 eb       	ldi	r30, 0xB1	; 177
    1022:	f5 e0       	ldi	r31, 0x05	; 5
    1024:	af e8       	ldi	r26, 0x8F	; 143
    1026:	b4 e0       	ldi	r27, 0x04	; 4
    1028:	21 e7       	ldi	r18, 0x71	; 113
    102a:	36 e0       	ldi	r19, 0x06	; 6
				}
			}*/
			
			for(unsigned char j = 0; j < 64; j++)
			{
				LEDs[j].green = Gems[j].green;
    102c:	80 81       	ld	r24, Z
    102e:	8c 93       	st	X, r24
				LEDs[j].red = Gems[j].red;
    1030:	81 81       	ldd	r24, Z+1	; 0x01
    1032:	11 96       	adiw	r26, 0x01	; 1
    1034:	8c 93       	st	X, r24
    1036:	11 97       	sbiw	r26, 0x01	; 1
				LEDs[j].blue = Gems[j].blue;
    1038:	82 81       	ldd	r24, Z+2	; 0x02
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	8c 93       	st	X, r24
    103e:	12 97       	sbiw	r26, 0x02	; 2
    1040:	33 96       	adiw	r30, 0x03	; 3
    1042:	13 96       	adiw	r26, 0x03	; 3
						setGemColor()
					}
				}
			}*/
			
			for(unsigned char j = 0; j < 64; j++)
    1044:	e2 17       	cp	r30, r18
    1046:	f3 07       	cpc	r31, r19
    1048:	89 f7       	brne	.-30     	; 0x102c <TickFct_Animate+0xe0>
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	08 95       	ret
			}*/
			state = AN_Idle;
			break;
			
		default:
			state = AN_Start;
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
				LEDs[j].red = Gems[j].red;
				LEDs[j].blue = Gems[j].blue;
			}
			break;
	}
	return state;
    1054:	08 95       	ret
    1056:	e1 eb       	ldi	r30, 0xB1	; 177
    1058:	f5 e0       	ldi	r31, 0x05	; 5
    105a:	af e8       	ldi	r26, 0x8F	; 143
    105c:	b4 e0       	ldi	r27, 0x04	; 4
    105e:	21 e7       	ldi	r18, 0x71	; 113
    1060:	36 e0       	ldi	r19, 0x06	; 6
    1062:	c8 cf       	rjmp	.-112    	; 0xff4 <TickFct_Animate+0xa8>
			break;
			
		case AN_FallingIntro:
			for(unsigned char j = 0; j < 64; j++)
			{
				if(j >= (8 * (7 - i)))
    1064:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <i.2190>
    1068:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <i.2190+0x1>
    106c:	22 27       	eor	r18, r18
    106e:	33 27       	eor	r19, r19
    1070:	28 1b       	sub	r18, r24
    1072:	39 0b       	sbc	r19, r25
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	22 0f       	add	r18, r18
    107a:	33 1f       	adc	r19, r19
    107c:	22 0f       	add	r18, r18
    107e:	33 1f       	adc	r19, r19
    1080:	28 5c       	subi	r18, 0xC8	; 200
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	dc 01       	movw	r26, r24
    1094:	aa 0f       	add	r26, r26
    1096:	bb 1f       	adc	r27, r27
    1098:	a8 0f       	add	r26, r24
    109a:	b9 1f       	adc	r27, r25
    109c:	af 50       	subi	r26, 0x0F	; 15
    109e:	bb 4f       	sbci	r27, 0xFB	; 251
    10a0:	ef e8       	ldi	r30, 0x8F	; 143
    10a2:	f4 e0       	ldi	r31, 0x04	; 4
				{
					LEDs[j].green = Gems[((i + 1) * 8) - 1 - (63 - j)].green;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	82 cf       	rjmp	.-252    	; 0xfae <TickFct_Animate+0x62>

000010aa <refillGemsNoRepeat>:
		}
	}	
}

void refillGemsNoRepeat(int color)
{
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	8c 01       	movw	r16, r24
	for(unsigned char i = 0; i < 64; i++)
    10b2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(getGemColor(i) == GC_Empty)
    10b4:	8c 2f       	mov	r24, r28
    10b6:	6f dc       	rcall	.-1826   	; 0x996 <getGemColor>
    10b8:	04 97       	sbiw	r24, 0x04	; 4
    10ba:	11 f5       	brne	.+68     	; 0x1100 <refillGemsNoRepeat+0x56>
		{
			setGemColor(i, rand() % 4);
    10bc:	ad d3       	rcall	.+1882   	; 0x1818 <rand>
    10be:	bc 01       	movw	r22, r24
    10c0:	63 70       	andi	r22, 0x03	; 3
    10c2:	70 78       	andi	r23, 0x80	; 128
    10c4:	77 23       	and	r23, r23
    10c6:	34 f4       	brge	.+12     	; 0x10d4 <refillGemsNoRepeat+0x2a>
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	71 09       	sbc	r23, r1
    10cc:	6c 6f       	ori	r22, 0xFC	; 252
    10ce:	7f 6f       	ori	r23, 0xFF	; 255
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8c 2f       	mov	r24, r28
    10d6:	b1 db       	rcall	.-2206   	; 0x83a <setGemColor>
			while(getGemColor(i) == color)
    10d8:	0e c0       	rjmp	.+28     	; 0x10f6 <refillGemsNoRepeat+0x4c>
			{
				setGemColor(i, rand() % 4);
    10da:	9e d3       	rcall	.+1852   	; 0x1818 <rand>
    10dc:	bc 01       	movw	r22, r24
    10de:	63 70       	andi	r22, 0x03	; 3
    10e0:	70 78       	andi	r23, 0x80	; 128
    10e2:	77 23       	and	r23, r23
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <refillGemsNoRepeat+0x48>
    10e6:	61 50       	subi	r22, 0x01	; 1
    10e8:	71 09       	sbc	r23, r1
    10ea:	6c 6f       	ori	r22, 0xFC	; 252
    10ec:	7f 6f       	ori	r23, 0xFF	; 255
    10ee:	6f 5f       	subi	r22, 0xFF	; 255
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8c 2f       	mov	r24, r28
    10f4:	a2 db       	rcall	.-2236   	; 0x83a <setGemColor>
	for(unsigned char i = 0; i < 64; i++)
	{
		if(getGemColor(i) == GC_Empty)
		{
			setGemColor(i, rand() % 4);
			while(getGemColor(i) == color)
    10f6:	8c 2f       	mov	r24, r28
    10f8:	4e dc       	rcall	.-1892   	; 0x996 <getGemColor>
    10fa:	80 17       	cp	r24, r16
    10fc:	91 07       	cpc	r25, r17
    10fe:	69 f3       	breq	.-38     	; 0x10da <refillGemsNoRepeat+0x30>
    1100:	cf 5f       	subi	r28, 0xFF	; 255
	}	
}

void refillGemsNoRepeat(int color)
{
	for(unsigned char i = 0; i < 64; i++)
    1102:	c0 34       	cpi	r28, 0x40	; 64
    1104:	b9 f6       	brne	.-82     	; 0x10b4 <refillGemsNoRepeat+0xa>
    1106:	cf 91       	pop	r28
			{
				setGemColor(i, rand() % 4);
			}
		}
	}
}
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <destroy>:
    110e:	ef 92       	push	r14
void refillGemsNoRepeat(int color);

// Destroy, the ultimate function. Destroys gem at cursor location and other gems
// of the same color that are connected to it.
void destroy()
{
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	0f 2e       	mov	r0, r31
    111c:	f8 e6       	ldi	r31, 0x68	; 104
    111e:	ef 2e       	mov	r14, r31
    1120:	f5 e0       	ldi	r31, 0x05	; 5
    1122:	ff 2e       	mov	r15, r31
    1124:	f0 2d       	mov	r31, r0
    1126:	88 ea       	ldi	r24, 0xA8	; 168
    1128:	95 e0       	ldi	r25, 0x05	; 5
    112a:	f7 01       	movw	r30, r14
	for(unsigned char i = 0; i < 64; i++)
	{
		Matching[i] = 0;
    112c:	11 92       	st	Z+, r1

// Destroy, the ultimate function. Destroys gem at cursor location and other gems
// of the same color that are connected to it.
void destroy()
{
	for(unsigned char i = 0; i < 64; i++)
    112e:	8e 17       	cp	r24, r30
    1130:	9f 07       	cpc	r25, r31
    1132:	e1 f7       	brne	.-8      	; 0x112c <destroy+0x1e>
	{
		Matching[i] = 0;
	}
	
	matchColor = getGemColor(getIndex(cursor.xIndex, cursor.yIndex));
    1134:	ec e5       	ldi	r30, 0x5C	; 92
    1136:	f5 e0       	ldi	r31, 0x05	; 5
    1138:	d1 81       	ldd	r29, Z+1	; 0x01
    113a:	c0 81       	ld	r28, Z
    113c:	8d 2f       	mov	r24, r29
    113e:	88 0f       	add	r24, r24
    1140:	88 0f       	add	r24, r24
    1142:	88 0f       	add	r24, r24
    1144:	8c 0f       	add	r24, r28
    1146:	27 dc       	rcall	.-1970   	; 0x996 <getGemColor>
    1148:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <matchColor+0x1>
    114c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <matchColor>
	Matching[getCursorIndex()] = 1;
    1150:	fb dd       	rcall	.-1034   	; 0xd48 <getCursorIndex>
    1152:	e8 2f       	mov	r30, r24
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	e8 59       	subi	r30, 0x98	; 152
    1158:	fa 4f       	sbci	r31, 0xFA	; 250
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 83       	st	Z, r24
    115e:	6d 2f       	mov	r22, r29
	
	searchMatching(cursor.xIndex, cursor.yIndex);
    1160:	8c 2f       	mov	r24, r28
    1162:	3a de       	rcall	.-908    	; 0xdd8 <searchMatching>
    1164:	d6 e0       	ldi	r29, 0x06	; 6
    1166:	11 c0       	rjmp	.+34     	; 0x118a <destroy+0x7c>
    1168:	f8 01       	movw	r30, r16
	
	for(unsigned char j = 0; j < 6; j++)
	{
		for(unsigned char i = 0; i < 64; i++)
		{
			if(Matching[i])
    116a:	81 91       	ld	r24, Z+
    116c:	8f 01       	movw	r16, r30
    116e:	88 23       	and	r24, r24
    1170:	39 f0       	breq	.+14     	; 0x1180 <destroy+0x72>
    1172:	6c 2f       	mov	r22, r28
			{
				searchMatching(getXIndex(i), getYIndex(i));
    1174:	66 95       	lsr	r22
    1176:	66 95       	lsr	r22
    1178:	66 95       	lsr	r22
    117a:	8c 2f       	mov	r24, r28
    117c:	87 70       	andi	r24, 0x07	; 7
    117e:	2c de       	rcall	.-936    	; 0xdd8 <searchMatching>
    1180:	cf 5f       	subi	r28, 0xFF	; 255
	
	searchMatching(cursor.xIndex, cursor.yIndex);
	
	for(unsigned char j = 0; j < 6; j++)
	{
		for(unsigned char i = 0; i < 64; i++)
    1182:	c0 34       	cpi	r28, 0x40	; 64
    1184:	89 f7       	brne	.-30     	; 0x1168 <destroy+0x5a>
    1186:	d1 50       	subi	r29, 0x01	; 1
    1188:	19 f0       	breq	.+6      	; 0x1190 <destroy+0x82>
	matchColor = getGemColor(getIndex(cursor.xIndex, cursor.yIndex));
	Matching[getCursorIndex()] = 1;
	
	searchMatching(cursor.xIndex, cursor.yIndex);
	
	for(unsigned char j = 0; j < 6; j++)
    118a:	87 01       	movw	r16, r14
void refillGemsNoRepeat(int color);

// Destroy, the ultimate function. Destroys gem at cursor location and other gems
// of the same color that are connected to it.
void destroy()
{
    118c:	c0 e0       	ldi	r28, 0x00	; 0
    118e:	ec cf       	rjmp	.-40     	; 0x1168 <destroy+0x5a>
    1190:	c0 e0       	ldi	r28, 0x00	; 0
    1192:	f7 01       	movw	r30, r14
		}
	}
	
	for(unsigned char i = 0; i < 64; i++)
	{
		if(Matching[i])
    1194:	81 91       	ld	r24, Z+
    1196:	7f 01       	movw	r14, r30
    1198:	88 23       	and	r24, r24
    119a:	81 f1       	breq	.+96     	; 0x11fc <destroy+0xee>
		{
			setGemColor(i,GC_Empty);
    119c:	64 e0       	ldi	r22, 0x04	; 4
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	8c 2f       	mov	r24, r28
    11a2:	4b db       	rcall	.-2410   	; 0x83a <setGemColor>
			if(prevCursor == getCursorIndex())
    11a4:	d1 dd       	rcall	.-1118   	; 0xd48 <getCursorIndex>
    11a6:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <prevCursor>
    11aa:	89 13       	cpse	r24, r25
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <destroy+0xc8>
    11ae:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <score>
			{
				score+=1;
    11b2:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <score+0x1>
    11b6:	a0 91 8b 04 	lds	r26, 0x048B	; 0x80048b <score+0x2>
    11ba:	b0 91 8c 04 	lds	r27, 0x048C	; 0x80048c <score+0x3>
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	a1 1d       	adc	r26, r1
    11c2:	b1 1d       	adc	r27, r1
    11c4:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <score>
    11c8:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <score+0x1>
    11cc:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <score+0x2>
    11d0:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <score+0x3>
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <destroy+0xee>
    11d6:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <score>
			}
			else
			{
				score += 10;
    11da:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <score+0x1>
    11de:	a0 91 8b 04 	lds	r26, 0x048B	; 0x80048b <score+0x2>
    11e2:	b0 91 8c 04 	lds	r27, 0x048C	; 0x80048c <score+0x3>
    11e6:	0a 96       	adiw	r24, 0x0a	; 10
    11e8:	a1 1d       	adc	r26, r1
    11ea:	b1 1d       	adc	r27, r1
    11ec:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <score>
    11f0:	90 93 8a 04 	sts	0x048A, r25	; 0x80048a <score+0x1>
    11f4:	a0 93 8b 04 	sts	0x048B, r26	; 0x80048b <score+0x2>
    11f8:	b0 93 8c 04 	sts	0x048C, r27	; 0x80048c <score+0x3>
    11fc:	cf 5f       	subi	r28, 0xFF	; 255
				searchMatching(getXIndex(i), getYIndex(i));
			}
		}
	}
	
	for(unsigned char i = 0; i < 64; i++)
    11fe:	c0 34       	cpi	r28, 0x40	; 64
    1200:	41 f6       	brne	.-112    	; 0x1192 <destroy+0x84>
			{
				score += 10;
			}
		}
	}
	refillGemsNoRepeat(matchColor);
    1202:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <matchColor>
    1206:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <matchColor+0x1>
    120a:	4f df       	rcall	.-354    	; 0x10aa <refillGemsNoRepeat>
    120c:	df 91       	pop	r29
	//refillGems();
}
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	08 95       	ret

0000121a <TickFct_Controller>:
    121a:	0f 93       	push	r16
void destroy();

unsigned char isDestroyed;

int TickFct_Controller(int state)
{
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
	switch(state)
    1224:	87 30       	cpi	r24, 0x07	; 7
    1226:	91 05       	cpc	r25, r1
    1228:	08 f0       	brcs	.+2      	; 0x122c <TickFct_Controller+0x12>
    122a:	5f c0       	rjmp	.+190    	; 0x12ea <TickFct_Controller+0xd0>
    122c:	fc 01       	movw	r30, r24
    122e:	e2 5b       	subi	r30, 0xB2	; 178
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	a2 c2       	rjmp	.+1348   	; 0x1778 <__tablejump2__>
				state= CN_Idle;
			}
			break;
			
		case CN_Move:
			state = CN_MoveWait;
    1234:	c6 e0       	ldi	r28, 0x06	; 6
    1236:	d0 e0       	ldi	r29, 0x00	; 0
    1238:	5a c0       	rjmp	.+180    	; 0x12ee <TickFct_Controller+0xd4>
		case CN_Init:
			state = CN_Idle;
			break;
			
		case CN_Idle:
			if(bnPress)
    123a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <bnPress>
    123e:	81 11       	cpse	r24, r1
    1240:	40 c0       	rjmp	.+128    	; 0x12c2 <TickFct_Controller+0xa8>
			{
				state = CN_Press;
			}
			else if(stickMoved(ADC_X, ADC_Y))
    1242:	00 91 69 03 	lds	r16, 0x0369	; 0x800369 <ADC_Y>
    1246:	10 91 6a 03 	lds	r17, 0x036A	; 0x80036a <ADC_Y+0x1>
    124a:	c0 91 ae 05 	lds	r28, 0x05AE	; 0x8005ae <ADC_X>
    124e:	d0 91 af 05 	lds	r29, 0x05AF	; 0x8005af <ADC_X+0x1>
    1252:	b8 01       	movw	r22, r16
    1254:	ce 01       	movw	r24, r28
    1256:	89 dc       	rcall	.-1774   	; 0xb6a <stickMoved>
    1258:	88 23       	and	r24, r24
    125a:	71 f1       	breq	.+92     	; 0x12b8 <TickFct_Controller+0x9e>
			{
				state = CN_Move;
				moveDir = getDirection(ADC_X, ADC_Y);
    125c:	b8 01       	movw	r22, r16
    125e:	ce 01       	movw	r24, r28
    1260:	91 dc       	rcall	.-1758   	; 0xb84 <getDirection>
    1262:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <moveDir>
			
		case CN_Release:
			break;
			
		case CN_Move:
			moveCursor(moveDir);
    1266:	99 27       	eor	r25, r25
    1268:	ed dc       	rcall	.-1574   	; 0xc44 <moveCursor>
			break;
    126a:	c5 e0       	ldi	r28, 0x05	; 5
    126c:	d0 e0       	ldi	r29, 0x00	; 0
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <TickFct_Controller+0xd4>
		case CN_Press:
			state = CN_Release;
			break;
			
		case CN_Release:
			if(bnPress)
    1270:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <bnPress>
    1274:	81 11       	cpse	r24, r1
    1276:	3b c0       	rjmp	.+118    	; 0x12ee <TickFct_Controller+0xd4>
    1278:	1f c0       	rjmp	.+62     	; 0x12b8 <TickFct_Controller+0x9e>
		case CN_Move:
			state = CN_MoveWait;
			break;
		
		case CN_MoveWait:
			if(!stickMoved(ADC_X, ADC_Y))
    127a:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <ADC_Y>
    127e:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <ADC_Y+0x1>
    1282:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <ADC_X>
    1286:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <ADC_X+0x1>
    128a:	6f dc       	rcall	.-1826   	; 0xb6a <stickMoved>
    128c:	88 23       	and	r24, r24
    128e:	a1 f0       	breq	.+40     	; 0x12b8 <TickFct_Controller+0x9e>
    1290:	2e c0       	rjmp	.+92     	; 0x12ee <TickFct_Controller+0xd4>
	{
		case CN_Start:
			break;
			
		case CN_Init:
			cursor.xIndex = 0;
    1292:	ec e5       	ldi	r30, 0x5C	; 92
    1294:	f5 e0       	ldi	r31, 0x05	; 5
    1296:	10 82       	st	Z, r1
			cursor.yIndex = 0;
    1298:	11 82       	std	Z+1, r1	; 0x01
			isDestroyed = 0;
    129a:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <isDestroyed>
			score = 0;
    129e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <score>
    12a2:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <score+0x1>
    12a6:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <score+0x2>
    12aa:	10 92 8c 04 	sts	0x048C, r1	; 0x80048c <score+0x3>
			prevCursor = 0;
    12ae:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <prevCursor>
int TickFct_Controller(int state)
{
	switch(state)
	{
		case CN_Start:
			state = CN_Init;
    12b2:	c1 e0       	ldi	r28, 0x01	; 1
    12b4:	d0 e0       	ldi	r29, 0x00	; 0
			cursor.xIndex = 0;
			cursor.yIndex = 0;
			isDestroyed = 0;
			score = 0;
			prevCursor = 0;
			break;
    12b6:	1b c0       	rjmp	.+54     	; 0x12ee <TickFct_Controller+0xd4>
			
		case CN_Idle:
			isDestroyed = 0;
    12b8:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <isDestroyed>
			break;
    12bc:	c2 e0       	ldi	r28, 0x02	; 2
    12be:	d0 e0       	ldi	r29, 0x00	; 0
			
		case CN_Press:
			if(startGame)
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <TickFct_Controller+0xd4>
    12c2:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <startGame>
			{
				destroy();
    12c6:	88 23       	and	r24, r24
    12c8:	51 f0       	breq	.+20     	; 0x12de <TickFct_Controller+0xc4>
				isDestroyed = 1;
    12ca:	21 df       	rcall	.-446    	; 0x110e <destroy>
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <isDestroyed>
				prevCursor = getCursorIndex();
    12d2:	3a dd       	rcall	.-1420   	; 0xd48 <getCursorIndex>
    12d4:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <prevCursor>
    12d8:	c3 e0       	ldi	r28, 0x03	; 3
    12da:	d0 e0       	ldi	r29, 0x00	; 0
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <TickFct_Controller+0xd4>
    12de:	c3 e0       	ldi	r28, 0x03	; 3
    12e0:	d0 e0       	ldi	r29, 0x00	; 0
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <TickFct_Controller+0xd4>
				state = CN_Idle;
			}
			break;
			
		case CN_Press:
			state = CN_Release;
    12e4:	c4 e0       	ldi	r28, 0x04	; 4
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <TickFct_Controller+0xd4>
				state = CN_MoveWait;
			}
			break;
			
		default:
			state = CN_Start;
    12ea:	c0 e0       	ldi	r28, 0x00	; 0
    12ec:	d0 e0       	ldi	r29, 0x00	; 0
			
		case CN_MoveWait:
			break;
	}
	return state;
}
    12ee:	ce 01       	movw	r24, r28
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
    12fa:	40 98       	cbi	0x08, 0	; 8
    12fc:	66 23       	and	r22, r22
    12fe:	11 f0       	breq	.+4      	; 0x1304 <write+0xa>
    1300:	42 9a       	sbi	0x08, 2	; 8
    1302:	15 c0       	rjmp	.+42     	; 0x132e <write+0x34>
    1304:	42 98       	cbi	0x08, 2	; 8
    1306:	13 c0       	rjmp	.+38     	; 0x132e <write+0x34>
    1308:	ac 01       	movw	r20, r24
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <write+0x18>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <write+0x14>
    1316:	40 ff       	sbrs	r20, 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <write+0x24>
    131a:	43 9a       	sbi	0x08, 3	; 8
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <write+0x26>
    131e:	43 98       	cbi	0x08, 3	; 8
    1320:	44 9a       	sbi	0x08, 4	; 8
    1322:	44 98       	cbi	0x08, 4	; 8
    1324:	21 50       	subi	r18, 0x01	; 1
    1326:	31 09       	sbc	r19, r1
    1328:	78 f7       	brcc	.-34     	; 0x1308 <write+0xe>
    132a:	40 9a       	sbi	0x08, 0	; 8
    132c:	08 95       	ret
    132e:	27 e0       	ldi	r18, 0x07	; 7
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	e9 cf       	rjmp	.-46     	; 0x1308 <write+0xe>

00001336 <write_cmd>:
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	e0 cf       	rjmp	.-64     	; 0x12fa <write>
    133a:	08 95       	ret

0000133c <nokia_lcd_init>:
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	38 9a       	sbi	0x07, 0	; 7
    1342:	39 9a       	sbi	0x07, 1	; 7
    1344:	3a 9a       	sbi	0x07, 2	; 7
    1346:	3b 9a       	sbi	0x07, 3	; 7
    1348:	3c 9a       	sbi	0x07, 4	; 7
    134a:	41 9a       	sbi	0x08, 1	; 8
    134c:	40 9a       	sbi	0x08, 0	; 8
    134e:	83 ec       	ldi	r24, 0xC3	; 195
    1350:	99 e0       	ldi	r25, 0x09	; 9
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <nokia_lcd_init+0x16>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <nokia_lcd_init+0x1c>
    1358:	00 00       	nop
    135a:	41 98       	cbi	0x08, 1	; 8
    135c:	8b e5       	ldi	r24, 0x5B	; 91
    135e:	94 e4       	ldi	r25, 0x44	; 68
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <nokia_lcd_init+0x24>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <nokia_lcd_init+0x2a>
    1366:	00 00       	nop
    1368:	41 9a       	sbi	0x08, 1	; 8
    136a:	40 98       	cbi	0x08, 0	; 8
    136c:	81 e2       	ldi	r24, 0x21	; 33
    136e:	e3 df       	rcall	.-58     	; 0x1336 <write_cmd>
    1370:	83 e1       	ldi	r24, 0x13	; 19
    1372:	e1 df       	rcall	.-62     	; 0x1336 <write_cmd>
    1374:	86 e0       	ldi	r24, 0x06	; 6
    1376:	df df       	rcall	.-66     	; 0x1336 <write_cmd>
    1378:	82 ec       	ldi	r24, 0xC2	; 194
    137a:	dd df       	rcall	.-70     	; 0x1336 <write_cmd>
    137c:	80 e2       	ldi	r24, 0x20	; 32
    137e:	db df       	rcall	.-74     	; 0x1336 <write_cmd>
    1380:	89 e0       	ldi	r24, 0x09	; 9
    1382:	d9 df       	rcall	.-78     	; 0x1336 <write_cmd>
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	d7 df       	rcall	.-82     	; 0x1336 <write_cmd>
    1388:	88 e4       	ldi	r24, 0x48	; 72
    138a:	d5 df       	rcall	.-86     	; 0x1336 <write_cmd>
    138c:	c8 ef       	ldi	r28, 0xF8	; 248
    138e:	d1 e0       	ldi	r29, 0x01	; 1
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	b2 df       	rcall	.-156    	; 0x12fa <write>
    1396:	21 97       	sbiw	r28, 0x01	; 1
    1398:	d9 f7       	brne	.-10     	; 0x1390 <nokia_lcd_init+0x54>
    139a:	88 e0       	ldi	r24, 0x08	; 8
    139c:	cc df       	rcall	.-104    	; 0x1336 <write_cmd>
    139e:	8c e0       	ldi	r24, 0x0C	; 12
    13a0:	ca df       	rcall	.-108    	; 0x1336 <write_cmd>
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <nokia_lcd_clear>:
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	c5 df       	rcall	.-118    	; 0x1336 <write_cmd>
    13ac:	80 e4       	ldi	r24, 0x40	; 64
    13ae:	c3 df       	rcall	.-122    	; 0x1336 <write_cmd>
    13b0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <nokia_lcd+0x1f8>
    13b4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <nokia_lcd+0x1f9>
    13b8:	ef e6       	ldi	r30, 0x6F	; 111
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	87 e6       	ldi	r24, 0x67	; 103
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	11 92       	st	Z+, r1
    13c2:	e8 17       	cp	r30, r24
    13c4:	f9 07       	cpc	r31, r25
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <nokia_lcd_clear+0x18>
    13c8:	08 95       	ret

000013ca <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
    13ca:	26 2f       	mov	r18, r22
    13cc:	26 95       	lsr	r18
    13ce:	26 95       	lsr	r18
    13d0:	26 95       	lsr	r18
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	34 e5       	ldi	r19, 0x54	; 84
    13d6:	23 9f       	mul	r18, r19
    13d8:	80 0d       	add	r24, r0
    13da:	91 1d       	adc	r25, r1
    13dc:	11 24       	eor	r1, r1
	if (value)
    13de:	44 23       	and	r20, r20
    13e0:	79 f0       	breq	.+30     	; 0x1400 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
    13e2:	fc 01       	movw	r30, r24
    13e4:	e1 59       	subi	r30, 0x91	; 145
    13e6:	fe 4f       	sbci	r31, 0xFE	; 254
    13e8:	67 70       	andi	r22, 0x07	; 7
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <nokia_lcd_set_pixel+0x2a>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	6a 95       	dec	r22
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <nokia_lcd_set_pixel+0x26>
    13f8:	90 81       	ld	r25, Z
    13fa:	89 2b       	or	r24, r25
    13fc:	80 83       	st	Z, r24
    13fe:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
    1400:	fc 01       	movw	r30, r24
    1402:	e1 59       	subi	r30, 0x91	; 145
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	67 70       	andi	r22, 0x07	; 7
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <nokia_lcd_set_pixel+0x48>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	6a 95       	dec	r22
    1414:	e2 f7       	brpl	.-8      	; 0x140e <nokia_lcd_set_pixel+0x44>
    1416:	80 95       	com	r24
    1418:	90 81       	ld	r25, Z
    141a:	89 23       	and	r24, r25
    141c:	80 83       	st	Z, r24
    141e:	08 95       	ret

00001420 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
    1420:	5f 92       	push	r5
    1422:	6f 92       	push	r6
    1424:	7f 92       	push	r7
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    1440:	26 2f       	mov	r18, r22
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	49 01       	movw	r8, r18
    1446:	88 0c       	add	r8, r8
    1448:	99 1c       	adc	r9, r9
    144a:	88 0c       	add	r8, r8
    144c:	99 1c       	adc	r9, r9
    144e:	82 0e       	add	r8, r18
    1450:	93 1e       	adc	r9, r19
    1452:	18 14       	cp	r1, r8
    1454:	19 04       	cpc	r1, r9
    1456:	0c f0       	brlt	.+2      	; 0x145a <nokia_lcd_write_char+0x3a>
    1458:	59 c0       	rjmp	.+178    	; 0x150c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    145a:	89 01       	movw	r16, r18
    145c:	00 0f       	add	r16, r16
    145e:	11 1f       	adc	r17, r17
    1460:	00 0f       	add	r16, r16
    1462:	11 1f       	adc	r17, r17
    1464:	00 0f       	add	r16, r16
    1466:	11 1f       	adc	r17, r17
    1468:	02 1b       	sub	r16, r18
    146a:	13 0b       	sbc	r17, r19
    146c:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    146e:	a8 2e       	mov	r10, r24
    1470:	b1 2c       	mov	r11, r1
    1472:	c5 01       	movw	r24, r10
    1474:	80 97       	sbiw	r24, 0x20	; 32
    1476:	5c 01       	movw	r10, r24
    1478:	aa 0c       	add	r10, r10
    147a:	bb 1c       	adc	r11, r11
    147c:	aa 0c       	add	r10, r10
    147e:	bb 1c       	adc	r11, r11
    1480:	a8 0e       	add	r10, r24
    1482:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    1484:	0f 2e       	mov	r0, r31
    1486:	f8 e6       	ldi	r31, 0x68	; 104
    1488:	cf 2e       	mov	r12, r31
    148a:	f3 e0       	ldi	r31, 0x03	; 3
    148c:	df 2e       	mov	r13, r31
    148e:	f0 2d       	mov	r31, r0
    1490:	0f 2e       	mov	r0, r31
    1492:	f7 e6       	ldi	r31, 0x67	; 103
    1494:	ef 2e       	mov	r14, r31
    1496:	f3 e0       	ldi	r31, 0x03	; 3
    1498:	ff 2e       	mov	r15, r31
    149a:	f0 2d       	mov	r31, r0
    149c:	2a c0       	rjmp	.+84     	; 0x14f2 <nokia_lcd_write_char+0xd2>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    149e:	fe 01       	movw	r30, r28
    14a0:	24 91       	lpm	r18, Z
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	87 2d       	mov	r24, r7
    14a6:	65 2d       	mov	r22, r5
    14a8:	39 d1       	rcall	.+626    	; 0x171c <__udivmodqi4>
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <nokia_lcd_write_char+0x90>
    14ac:	35 95       	asr	r19
    14ae:	27 95       	ror	r18
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <nokia_lcd_write_char+0x8c>
    14b4:	20 ff       	sbrs	r18, 0
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <nokia_lcd_write_char+0xaa>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
    14b8:	f6 01       	movw	r30, r12
    14ba:	60 81       	ld	r22, Z
    14bc:	67 0d       	add	r22, r7
    14be:	f7 01       	movw	r30, r14
    14c0:	80 81       	ld	r24, Z
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	86 0d       	add	r24, r6
    14c6:	81 df       	rcall	.-254    	; 0x13ca <nokia_lcd_set_pixel>
    14c8:	08 c0       	rjmp	.+16     	; 0x14da <nokia_lcd_write_char+0xba>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
    14ca:	f6 01       	movw	r30, r12
    14cc:	60 81       	ld	r22, Z
    14ce:	67 0d       	add	r22, r7
    14d0:	f7 01       	movw	r30, r14
    14d2:	80 81       	ld	r24, Z
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	86 0d       	add	r24, r6
    14d8:	78 df       	rcall	.-272    	; 0x13ca <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
    14da:	73 94       	inc	r7
    14dc:	87 2d       	mov	r24, r7
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	80 17       	cp	r24, r16
    14e2:	91 07       	cpc	r25, r17
    14e4:	e4 f2       	brlt	.-72     	; 0x149e <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
    14e6:	63 94       	inc	r6
    14e8:	86 2d       	mov	r24, r6
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	88 15       	cp	r24, r8
    14ee:	99 05       	cpc	r25, r9
    14f0:	6c f4       	brge	.+26     	; 0x150c <nokia_lcd_write_char+0xec>
		for (y = 0; y < 7*scale; y++)
    14f2:	10 16       	cp	r1, r16
    14f4:	11 06       	cpc	r1, r17
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
    14f6:	bc f7       	brge	.-18     	; 0x14e6 <nokia_lcd_write_char+0xc6>
    14f8:	86 2d       	mov	r24, r6
    14fa:	65 2d       	mov	r22, r5
    14fc:	0f d1       	rcall	.+542    	; 0x171c <__udivmodqi4>
    14fe:	e5 01       	movw	r28, r10
    1500:	c8 0f       	add	r28, r24
    1502:	d1 1d       	adc	r29, r1
    1504:	c6 55       	subi	r28, 0x56	; 86
    1506:	df 4f       	sbci	r29, 0xFF	; 255
    1508:	71 2c       	mov	r7, r1
    150a:	c9 cf       	rjmp	.-110    	; 0x149e <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    150c:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <nokia_lcd+0x1f8>
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	98 0f       	add	r25, r24
    1514:	85 2d       	mov	r24, r5
    1516:	88 0f       	add	r24, r24
    1518:	88 0f       	add	r24, r24
    151a:	85 0d       	add	r24, r5
    151c:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
    151e:	84 35       	cpi	r24, 0x54	; 84
    1520:	18 f4       	brcc	.+6      	; 0x1528 <nokia_lcd_write_char+0x108>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
    1522:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <nokia_lcd+0x1f8>
    1526:	0e c0       	rjmp	.+28     	; 0x1544 <nokia_lcd_write_char+0x124>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
    1528:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
    152c:	e8 e6       	ldi	r30, 0x68	; 104
    152e:	f3 e0       	ldi	r31, 0x03	; 3
    1530:	80 81       	ld	r24, Z
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	98 0f       	add	r25, r24
    1536:	85 2d       	mov	r24, r5
    1538:	88 0f       	add	r24, r24
    153a:	88 0f       	add	r24, r24
    153c:	88 0f       	add	r24, r24
    153e:	85 19       	sub	r24, r5
    1540:	89 0f       	add	r24, r25
    1542:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
    1544:	80 91 68 03 	lds	r24, 0x0368	; 0x800368 <nokia_lcd+0x1f9>
    1548:	80 33       	cpi	r24, 0x30	; 48
    154a:	20 f0       	brcs	.+8      	; 0x1554 <nokia_lcd_write_char+0x134>
		nokia_lcd.cursor_x = 0;
    154c:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
    1550:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <nokia_lcd+0x1f9>
	}
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	9f 90       	pop	r9
    156a:	8f 90       	pop	r8
    156c:	7f 90       	pop	r7
    156e:	6f 90       	pop	r6
    1570:	5f 90       	pop	r5
    1572:	08 95       	ret

00001574 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
	while(*str)
    157c:	88 81       	ld	r24, Y
    157e:	88 23       	and	r24, r24
    1580:	39 f0       	breq	.+14     	; 0x1590 <nokia_lcd_write_string+0x1c>
    1582:	16 2f       	mov	r17, r22
    1584:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
    1586:	61 2f       	mov	r22, r17
    1588:	4b df       	rcall	.-362    	; 0x1420 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
    158a:	89 91       	ld	r24, Y+
    158c:	81 11       	cpse	r24, r1
    158e:	fb cf       	rjmp	.-10     	; 0x1586 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	08 95       	ret

00001598 <nokia_lcd_write_string_with_size>:

// Function created by Elijah Nicasio
void nokia_lcd_write_string_with_size(const char *str, uint8_t scale, unsigned char strSize)
{
    1598:	ff 92       	push	r15
    159a:	0f 93       	push	r16
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
	for(unsigned char i = 0; i < strSize; i ++)
    15a2:	44 23       	and	r20, r20
    15a4:	79 f0       	breq	.+30     	; 0x15c4 <nokia_lcd_write_string_with_size+0x2c>
    15a6:	f6 2e       	mov	r15, r22
    15a8:	ec 01       	movw	r28, r24
    15aa:	41 50       	subi	r20, 0x01	; 1
    15ac:	04 2f       	mov	r16, r20
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	0f 5f       	subi	r16, 0xFF	; 255
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	08 0f       	add	r16, r24
    15b6:	19 1f       	adc	r17, r25
	{
		nokia_lcd_write_char(str[i], scale);
    15b8:	6f 2d       	mov	r22, r15
    15ba:	89 91       	ld	r24, Y+
    15bc:	31 df       	rcall	.-414    	; 0x1420 <nokia_lcd_write_char>
}

// Function created by Elijah Nicasio
void nokia_lcd_write_string_with_size(const char *str, uint8_t scale, unsigned char strSize)
{
	for(unsigned char i = 0; i < strSize; i ++)
    15be:	c0 17       	cp	r28, r16
    15c0:	d1 07       	cpc	r29, r17
    15c2:	d1 f7       	brne	.-12     	; 0x15b8 <nokia_lcd_write_string_with_size+0x20>
	{
		nokia_lcd_write_char(str[i], scale);
	}
}
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	ff 90       	pop	r15
    15ce:	08 95       	ret

000015d0 <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
    15d0:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
    15d4:	60 93 68 03 	sts	0x0368, r22	; 0x800368 <nokia_lcd+0x1f9>
    15d8:	08 95       	ret

000015da <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
    15da:	0f 93       	push	r16
    15dc:	1f 93       	push	r17
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
    15e2:	80 e8       	ldi	r24, 0x80	; 128
    15e4:	a8 de       	rcall	.-688    	; 0x1336 <write_cmd>
	write_cmd(0x40);
    15e6:	80 e4       	ldi	r24, 0x40	; 64
    15e8:	a6 de       	rcall	.-692    	; 0x1336 <write_cmd>
    15ea:	cf e6       	ldi	r28, 0x6F	; 111
    15ec:	d1 e0       	ldi	r29, 0x01	; 1
    15ee:	07 e6       	ldi	r16, 0x67	; 103
    15f0:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	89 91       	ld	r24, Y+
    15f6:	81 de       	rcall	.-766    	; 0x12fa <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
    15f8:	c0 17       	cp	r28, r16
    15fa:	d1 07       	cpc	r29, r17
    15fc:	d1 f7       	brne	.-12     	; 0x15f2 <nokia_lcd_render+0x18>
		write_data(nokia_lcd.screen[i]);
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	08 95       	ret

00001608 <initMatrix>:

	while(n--){
		x=3;       //empirically determined fudge factor  16 mhz
		while(x--);
	}
}
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	e4 e0       	ldi	r30, 0x04	; 4
    160e:	f4 e0       	ldi	r31, 0x04	; 4
    1610:	c9 e4       	ldi	r28, 0x49	; 73
    1612:	d4 e0       	ldi	r29, 0x04	; 4
    1614:	ad e6       	ldi	r26, 0x6D	; 109
    1616:	b3 e0       	ldi	r27, 0x03	; 3
    1618:	84 e4       	ldi	r24, 0x44	; 68
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	11 92       	st	Z+, r1
    161e:	19 92       	st	Y+, r1
    1620:	1d 92       	st	X+, r1
    1622:	e8 17       	cp	r30, r24
    1624:	f9 07       	cpc	r31, r25
    1626:	d1 f7       	brne	.-12     	; 0x161c <initMatrix+0x14>
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	08 95       	ret

0000162e <setLED>:
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	fc 01       	movw	r30, r24
    1632:	ec 5f       	subi	r30, 0xFC	; 252
    1634:	fb 4f       	sbci	r31, 0xFB	; 251
    1636:	60 83       	st	Z, r22
    1638:	fc 01       	movw	r30, r24
    163a:	e7 5b       	subi	r30, 0xB7	; 183
    163c:	fb 4f       	sbci	r31, 0xFB	; 251
    163e:	40 83       	st	Z, r20
    1640:	fc 01       	movw	r30, r24
    1642:	e3 59       	subi	r30, 0x93	; 147
    1644:	fc 4f       	sbci	r31, 0xFC	; 252
    1646:	20 83       	st	Z, r18
    1648:	08 95       	ret

0000164a <setAllLEDs>:
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
    164e:	e4 e0       	ldi	r30, 0x04	; 4
    1650:	f4 e0       	ldi	r31, 0x04	; 4
    1652:	c9 e4       	ldi	r28, 0x49	; 73
    1654:	d4 e0       	ldi	r29, 0x04	; 4
    1656:	ad e6       	ldi	r26, 0x6D	; 109
    1658:	b3 e0       	ldi	r27, 0x03	; 3
    165a:	24 e4       	ldi	r18, 0x44	; 68
    165c:	34 e0       	ldi	r19, 0x04	; 4
    165e:	81 93       	st	Z+, r24
    1660:	69 93       	st	Y+, r22
    1662:	4d 93       	st	X+, r20
    1664:	e2 17       	cp	r30, r18
    1666:	f3 07       	cpc	r31, r19
    1668:	d1 f7       	brne	.-12     	; 0x165e <setAllLEDs+0x14>
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <send>:
    1670:	28 e0       	ldi	r18, 0x08	; 8
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	90 e8       	ldi	r25, 0x80	; 128
    1676:	48 2f       	mov	r20, r24
    1678:	49 23       	and	r20, r25
    167a:	81 f0       	breq	.+32     	; 0x169c <send+0x2c>
    167c:	28 9a       	sbi	0x05, 0	; 5
	...
    168a:	28 98       	cbi	0x05, 0	; 5
	...
    1698:	00 00       	nop
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <send+0x40>
    169c:	28 9a       	sbi	0x05, 0	; 5
    169e:	00 00       	nop
    16a0:	28 98       	cbi	0x05, 0	; 5
	...
    16ae:	00 00       	nop
    16b0:	96 95       	lsr	r25
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	31 09       	sbc	r19, r1
    16b6:	f9 f6       	brne	.-66     	; 0x1676 <send+0x6>
    16b8:	08 95       	ret

000016ba <RES>:

void RES()
{
	TOff(); delnus(55);
    16ba:	28 98       	cbi	0x05, 0	; 5
    16bc:	08 95       	ret

000016be <cycle>:
		}
	}
}

void cycle()
{
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	c4 e0       	ldi	r28, 0x04	; 4
    16d0:	d4 e0       	ldi	r29, 0x04	; 4
    16d2:	0f 2e       	mov	r0, r31
    16d4:	fd e6       	ldi	r31, 0x6D	; 109
    16d6:	ef 2e       	mov	r14, r31
    16d8:	f3 e0       	ldi	r31, 0x03	; 3
    16da:	ff 2e       	mov	r15, r31
    16dc:	f0 2d       	mov	r31, r0
    16de:	09 e4       	ldi	r16, 0x49	; 73
    16e0:	14 e0       	ldi	r17, 0x04	; 4
    16e2:	0f 2e       	mov	r0, r31
    16e4:	f4 e4       	ldi	r31, 0x44	; 68
    16e6:	cf 2e       	mov	r12, r31
    16e8:	f4 e0       	ldi	r31, 0x04	; 4
    16ea:	df 2e       	mov	r13, r31
    16ec:	f0 2d       	mov	r31, r0
	pr=r; //init pointers
	pg=g;
	pb=b;
	n=64;
	while(n--){    //update 30 leds
		send(*pg++);
    16ee:	89 91       	ld	r24, Y+
    16f0:	bf df       	rcall	.-130    	; 0x1670 <send>
		send(*pb++);
    16f2:	f7 01       	movw	r30, r14
    16f4:	81 91       	ld	r24, Z+
    16f6:	7f 01       	movw	r14, r30
    16f8:	bb df       	rcall	.-138    	; 0x1670 <send>
		send(*pr++);
    16fa:	f8 01       	movw	r30, r16
    16fc:	81 91       	ld	r24, Z+
    16fe:	8f 01       	movw	r16, r30
    1700:	b7 df       	rcall	.-146    	; 0x1670 <send>

	pr=r; //init pointers
	pg=g;
	pb=b;
	n=64;
	while(n--){    //update 30 leds
    1702:	cc 15       	cp	r28, r12
    1704:	dd 05       	cpc	r29, r13
		send(*pg++);
		send(*pb++);
		send(*pr++);
	}
	RES();
    1706:	99 f7       	brne	.-26     	; 0x16ee <cycle+0x30>
    1708:	d8 df       	rcall	.-80     	; 0x16ba <RES>
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	ff 90       	pop	r15
    1714:	ef 90       	pop	r14
    1716:	df 90       	pop	r13
    1718:	cf 90       	pop	r12
    171a:	08 95       	ret

0000171c <__udivmodqi4>:
    171c:	99 1b       	sub	r25, r25
    171e:	79 e0       	ldi	r23, 0x09	; 9
    1720:	04 c0       	rjmp	.+8      	; 0x172a <__udivmodqi4_ep>

00001722 <__udivmodqi4_loop>:
    1722:	99 1f       	adc	r25, r25
    1724:	96 17       	cp	r25, r22
    1726:	08 f0       	brcs	.+2      	; 0x172a <__udivmodqi4_ep>
    1728:	96 1b       	sub	r25, r22

0000172a <__udivmodqi4_ep>:
    172a:	88 1f       	adc	r24, r24
    172c:	7a 95       	dec	r23
    172e:	c9 f7       	brne	.-14     	; 0x1722 <__udivmodqi4_loop>
    1730:	80 95       	com	r24
    1732:	08 95       	ret

00001734 <__udivmodsi4>:
    1734:	a1 e2       	ldi	r26, 0x21	; 33
    1736:	1a 2e       	mov	r1, r26
    1738:	aa 1b       	sub	r26, r26
    173a:	bb 1b       	sub	r27, r27
    173c:	fd 01       	movw	r30, r26
    173e:	0d c0       	rjmp	.+26     	; 0x175a <__udivmodsi4_ep>

00001740 <__udivmodsi4_loop>:
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	ee 1f       	adc	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	a2 17       	cp	r26, r18
    174a:	b3 07       	cpc	r27, r19
    174c:	e4 07       	cpc	r30, r20
    174e:	f5 07       	cpc	r31, r21
    1750:	20 f0       	brcs	.+8      	; 0x175a <__udivmodsi4_ep>
    1752:	a2 1b       	sub	r26, r18
    1754:	b3 0b       	sbc	r27, r19
    1756:	e4 0b       	sbc	r30, r20
    1758:	f5 0b       	sbc	r31, r21

0000175a <__udivmodsi4_ep>:
    175a:	66 1f       	adc	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	1a 94       	dec	r1
    1764:	69 f7       	brne	.-38     	; 0x1740 <__udivmodsi4_loop>
    1766:	60 95       	com	r22
    1768:	70 95       	com	r23
    176a:	80 95       	com	r24
    176c:	90 95       	com	r25
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	bd 01       	movw	r22, r26
    1774:	cf 01       	movw	r24, r30
    1776:	08 95       	ret

00001778 <__tablejump2__>:
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	00 24       	eor	r0, r0
    177e:	00 1c       	adc	r0, r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	07 90       	elpm	r0, Z+
    1784:	f6 91       	elpm	r31, Z
    1786:	e0 2d       	mov	r30, r0
    1788:	09 94       	ijmp

0000178a <do_rand>:
    178a:	8f 92       	push	r8
    178c:	9f 92       	push	r9
    178e:	af 92       	push	r10
    1790:	bf 92       	push	r11
    1792:	cf 92       	push	r12
    1794:	df 92       	push	r13
    1796:	ef 92       	push	r14
    1798:	ff 92       	push	r15
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
    17a0:	68 81       	ld	r22, Y
    17a2:	79 81       	ldd	r23, Y+1	; 0x01
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	61 15       	cp	r22, r1
    17aa:	71 05       	cpc	r23, r1
    17ac:	81 05       	cpc	r24, r1
    17ae:	91 05       	cpc	r25, r1
    17b0:	21 f4       	brne	.+8      	; 0x17ba <do_rand+0x30>
    17b2:	64 e2       	ldi	r22, 0x24	; 36
    17b4:	79 ed       	ldi	r23, 0xD9	; 217
    17b6:	8b e5       	ldi	r24, 0x5B	; 91
    17b8:	97 e0       	ldi	r25, 0x07	; 7
    17ba:	2d e1       	ldi	r18, 0x1D	; 29
    17bc:	33 ef       	ldi	r19, 0xF3	; 243
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	38 d0       	rcall	.+112    	; 0x1834 <__divmodsi4>
    17c4:	49 01       	movw	r8, r18
    17c6:	5a 01       	movw	r10, r20
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	a7 ea       	ldi	r26, 0xA7	; 167
    17ce:	b1 e4       	ldi	r27, 0x41	; 65
    17d0:	4d d0       	rcall	.+154    	; 0x186c <__muluhisi3>
    17d2:	6b 01       	movw	r12, r22
    17d4:	7c 01       	movw	r14, r24
    17d6:	ac ee       	ldi	r26, 0xEC	; 236
    17d8:	b4 ef       	ldi	r27, 0xF4	; 244
    17da:	a5 01       	movw	r20, r10
    17dc:	94 01       	movw	r18, r8
    17de:	52 d0       	rcall	.+164    	; 0x1884 <__mulohisi3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	8c 0d       	add	r24, r12
    17e6:	9d 1d       	adc	r25, r13
    17e8:	ae 1d       	adc	r26, r14
    17ea:	bf 1d       	adc	r27, r15
    17ec:	b7 ff       	sbrs	r27, 7
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <do_rand+0x6c>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	a1 09       	sbc	r26, r1
    17f4:	b0 48       	sbci	r27, 0x80	; 128
    17f6:	88 83       	st	Y, r24
    17f8:	99 83       	std	Y+1, r25	; 0x01
    17fa:	aa 83       	std	Y+2, r26	; 0x02
    17fc:	bb 83       	std	Y+3, r27	; 0x03
    17fe:	9f 77       	andi	r25, 0x7F	; 127
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	df 90       	pop	r13
    180a:	cf 90       	pop	r12
    180c:	bf 90       	pop	r11
    180e:	af 90       	pop	r10
    1810:	9f 90       	pop	r9
    1812:	8f 90       	pop	r8
    1814:	08 95       	ret

00001816 <rand_r>:
    1816:	b9 cf       	rjmp	.-142    	; 0x178a <do_rand>

00001818 <rand>:
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	b6 cf       	rjmp	.-148    	; 0x178a <do_rand>

0000181e <srand>:
    181e:	a0 e0       	ldi	r26, 0x00	; 0
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1826:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    182a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    182e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1832:	08 95       	ret

00001834 <__divmodsi4>:
    1834:	05 2e       	mov	r0, r21
    1836:	97 fb       	bst	r25, 7
    1838:	16 f4       	brtc	.+4      	; 0x183e <__divmodsi4+0xa>
    183a:	00 94       	com	r0
    183c:	0f d0       	rcall	.+30     	; 0x185c <__negsi2>
    183e:	57 fd       	sbrc	r21, 7
    1840:	05 d0       	rcall	.+10     	; 0x184c <__divmodsi4_neg2>
    1842:	78 df       	rcall	.-272    	; 0x1734 <__udivmodsi4>
    1844:	07 fc       	sbrc	r0, 7
    1846:	02 d0       	rcall	.+4      	; 0x184c <__divmodsi4_neg2>
    1848:	46 f4       	brtc	.+16     	; 0x185a <__divmodsi4_exit>
    184a:	08 c0       	rjmp	.+16     	; 0x185c <__negsi2>

0000184c <__divmodsi4_neg2>:
    184c:	50 95       	com	r21
    184e:	40 95       	com	r20
    1850:	30 95       	com	r19
    1852:	21 95       	neg	r18
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	4f 4f       	sbci	r20, 0xFF	; 255
    1858:	5f 4f       	sbci	r21, 0xFF	; 255

0000185a <__divmodsi4_exit>:
    185a:	08 95       	ret

0000185c <__negsi2>:
    185c:	90 95       	com	r25
    185e:	80 95       	com	r24
    1860:	70 95       	com	r23
    1862:	61 95       	neg	r22
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	8f 4f       	sbci	r24, 0xFF	; 255
    1868:	9f 4f       	sbci	r25, 0xFF	; 255
    186a:	08 95       	ret

0000186c <__muluhisi3>:
    186c:	0f d0       	rcall	.+30     	; 0x188c <__umulhisi3>
    186e:	a5 9f       	mul	r26, r21
    1870:	90 0d       	add	r25, r0
    1872:	b4 9f       	mul	r27, r20
    1874:	90 0d       	add	r25, r0
    1876:	a4 9f       	mul	r26, r20
    1878:	80 0d       	add	r24, r0
    187a:	91 1d       	adc	r25, r1
    187c:	11 24       	eor	r1, r1
    187e:	08 95       	ret

00001880 <__mulshisi3>:
    1880:	b7 ff       	sbrs	r27, 7
    1882:	f4 cf       	rjmp	.-24     	; 0x186c <__muluhisi3>

00001884 <__mulohisi3>:
    1884:	f3 df       	rcall	.-26     	; 0x186c <__muluhisi3>
    1886:	82 1b       	sub	r24, r18
    1888:	93 0b       	sbc	r25, r19
    188a:	08 95       	ret

0000188c <__umulhisi3>:
    188c:	a2 9f       	mul	r26, r18
    188e:	b0 01       	movw	r22, r0
    1890:	b3 9f       	mul	r27, r19
    1892:	c0 01       	movw	r24, r0
    1894:	a3 9f       	mul	r26, r19
    1896:	70 0d       	add	r23, r0
    1898:	81 1d       	adc	r24, r1
    189a:	11 24       	eor	r1, r1
    189c:	91 1d       	adc	r25, r1
    189e:	b2 9f       	mul	r27, r18
    18a0:	70 0d       	add	r23, r0
    18a2:	81 1d       	adc	r24, r1
    18a4:	11 24       	eor	r1, r1
    18a6:	91 1d       	adc	r25, r1
    18a8:	08 95       	ret

000018aa <_exit>:
    18aa:	f8 94       	cli

000018ac <__stop_program>:
    18ac:	ff cf       	rjmp	.-2      	; 0x18ac <__stop_program>
